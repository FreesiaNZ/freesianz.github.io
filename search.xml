<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C &amp; C plus plus 学习路线</title>
    <url>/2024/03/15/C&amp;Cplusplus%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<img src="/2024/03/15/C&Cplusplus%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/01-C&Cplusplus%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" class>]]></content>
      <categories>
        <category>C &amp; C plus plus</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C plus plus</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS-7 安装 docker</title>
    <url>/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><blockquote>
<p>使用阿里云 yum 源安装 Docker-CE 。</p>
</blockquote>
<p>确保 NAT 网络，可以 ping 通百度。</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85docker/01-ping-baidu.png" class>

<p>更换为阿里云 yum 源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">find / -name  <span class="string">&quot;*.repo&quot;</span> -<span class="built_in">exec</span> <span class="built_in">mv</span> &#123;&#125; &#123;&#125;.bak \;</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85docker/02-command-1.png" class>

<p>清除 yum 缓存，安装 yum 工具包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum -y install yum-utils</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85docker/03-command-2.png" class>

<p>配置 yum 仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85docker/04-command-3.png" class>

<p>列出 docker-ce 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85docker/05-list-docker-version.png" class>

<p>安装 docker-ce ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker-ce -y</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85docker/06-install-docker.png" class>

<p>启动 docker 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure>

<p>挂载 &#x2F;run&#x2F;docker.sock：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll /run/docker.sock</span><br></pre></td></tr></table></figure>

<p>创建用户 docker 到 docker 用户组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -aG docker docker</span><br></pre></td></tr></table></figure>

<p>配置 docker 镜像加速器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://uvbz951q.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>启动 docker 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl <span class="built_in">enable</span>  docker</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<h1 id="命令以及应用"><a href="#命令以及应用" class="headerlink" title="命令以及应用"></a>命令以及应用</h1><h2 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search nginx   <span class="comment">#搜索和nginx相关的镜像</span></span><br><span class="line">docker pull nginx   <span class="comment">#拉取镜像默认版本（下载）</span></span><br><span class="line">docker pull nginx:1.13.2    <span class="comment">#拉取镜像指定版本</span></span><br><span class="line">docker run nginx       <span class="comment">#运行一个镜像(如果启动后不做任何操作，容器就会断开连接)</span></span><br><span class="line">docker run -it ubuntu  /bin/bash    <span class="comment">#获取终端/bin/bash 打开容器（让容器运行在前台）</span></span><br><span class="line">docker run -itd httpd  /bin/bash     <span class="comment">#在后台运行新镜像</span></span><br><span class="line">docker attach  <span class="built_in">id</span>号       <span class="comment">#将容器调到前台，进入up状态的容器内部</span></span><br><span class="line">docker start  <span class="built_in">id</span>号         <span class="comment">#启动停止的容器（必须在docker ps 中有）</span></span><br><span class="line">docker logs  ID号         <span class="comment">#查看输出日志</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">exit</span>            //退出容器，容器是关闭状态</span><br><span class="line">ctrl +p +q  //退出容器，并且容器是up状态</span><br><span class="line"><span class="built_in">read</span> escape  sequence  //退出容器，并且容器是up状态</span><br><span class="line"> </span><br><span class="line">docker ps -a          <span class="comment">#列出所有的容器</span></span><br><span class="line">docker ps             <span class="comment">#列出所有运行中的容器</span></span><br><span class="line">docker container <span class="built_in">ls</span>   <span class="comment">#列出所有运行中的容器</span></span><br><span class="line">docker ps -qa           <span class="comment">#仅输出所有容器的id号</span></span><br><span class="line">docker <span class="built_in">rm</span>  ID号        <span class="comment">#删除指定容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f             <span class="comment">#删除正在运行的容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f `docker ps -qa`     <span class="comment">#删除所有的容器</span></span><br><span class="line"> </span><br><span class="line">docker images          <span class="comment">#列出所有镜像</span></span><br><span class="line">docker rmi ID号        <span class="comment">#删除镜像</span></span><br><span class="line">docker save -o busy.tar busybox    <span class="comment">#备份镜像</span></span><br><span class="line">docker load -i busy.tar            <span class="comment">#导入镜像</span></span><br><span class="line"> </span><br><span class="line">容器意外中断：</span><br><span class="line">docker run --restart always       <span class="comment">#不管什么原因停止，全部自动重启</span></span><br><span class="line">docker run --<span class="built_in">help</span>                     <span class="comment">#查看帮助</span></span><br><span class="line">man docker run                <span class="comment">#查看详细帮助</span></span><br></pre></td></tr></table></figure>

<h2 id="运行命令实例"><a href="#运行命令实例" class="headerlink" title="运行命令实例"></a>运行命令实例</h2><p>eg：在容器内运行应用程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run ubuntu:latest /bin/echo <span class="string">&quot;Hello World&quot;</span>  运行一个容器并执行命令</span><br><span class="line">    （一个容器只运行一个服务，运行完就被杀死了）</span><br><span class="line">docker ps -a   查看</span><br></pre></td></tr></table></figure>

<p>eg：运行交互式容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -i -t ubuntu:latest /bin/bash</span><br><span class="line">    -t：在新容器内指定一个伪终端或终端。</span><br><span class="line">    -i：允许你对容器内的标准输入 (STDIN) 进行交互。</span><br></pre></td></tr></table></figure>

<p>eg：让容器运行在后台<br>    -d   在后台运行<br>    -c   指定命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d ubuntu:latest /bin/bash -c <span class="string">&quot;while true; do echo &quot;</span>666<span class="string">&quot;; sleep 1; done&quot;</span></span><br><span class="line">docker run -d  /bin/bash -c <span class="string">&quot;for i in &#123;1..100&#125;; do echo <span class="variable">$i</span>;sleep 1;done&quot;</span></span><br><span class="line">docker logs  ID号   <span class="comment">#查看输出日志</span></span><br><span class="line">docker logs -f -t --<span class="built_in">tail</span>=100 myredis    <span class="comment">#查看最后100行日志，-f：跟踪实时日志 -t:显示时间戳</span></span><br></pre></td></tr></table></figure>

<h2 id="运行容器用到的参数"><a href="#运行容器用到的参数" class="headerlink" title="运行容器用到的参数"></a>运行容器用到的参数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis -p 6379:6379 -u root --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-itd redis</span><br></pre></td></tr></table></figure>

<p>-u root      #指定以root身份运行<br>–privileged&#x3D;true    #让container内的root拥有真正的root权限<br>-v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro　　#修改容器的时间，与宿主机一致</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/cfzy/p/14633166.html">CentOS7 安装搭建 docker 环境-博客园</a></p>
]]></content>
      <categories>
        <category>Download &amp; Install &amp; Configure</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS-7 安装 nginx</title>
    <url>/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/</url>
    <content><![CDATA[<h1 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h1><p>查看 <code>C++</code> 环境是否安装，未安装使用命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/01-gcc.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<p>查看 <code>zlib</code> 是否安装，未安装使用命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /usr/lib64/pkgconfig/zlib.pc</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/02-zlib.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>

<p>查看 <code>pcre</code> 是否安装，未安装使用命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa pcre</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/03-pcre.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>

<p>查看 <code>openssl</code> 是否安装，未安装使用命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep openssl</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/04-openssl.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>

<h1 id="下载和配置"><a href="#下载和配置" class="headerlink" title="下载和配置"></a>下载和配置</h1><p>查看 <code>wget</code> 是否安装，未安装使用命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep wget</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/05-wget.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure>

<p>新建 <code>nginx</code> 文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"><span class="built_in">mkdir</span> nginx</span><br><span class="line"><span class="built_in">cd</span> nginx</span><br></pre></td></tr></table></figure>
<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/06-folder.png" class>

<p>使用 wget 命令下载 <code>nginx</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.21.6.tar.gz</span><br></pre></td></tr></table></figure>
<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/07-nginx.png" class>

<p>解压 nginx-1.21.6.tar.gz 并进入解压后的目录：</p>
<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/08-tar.png" class>

<p>在解压后的目录进行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure>

<p>出现报错，查找解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">You can either <span class="built_in">disable</span> the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the <span class="built_in">source</span> with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure>

<p>缺少安装包，可能是之前的环境出现问题，重新安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install pcre</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/09-no-problem.png" class>

<p>没有问题，根据提示添加 –without-http_rewrite_module ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --without-http_rewrite_module</span><br></pre></td></tr></table></figure>

<p>出现报错，查找解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure: error: SSL modules require the OpenSSL library.</span><br><span class="line">You can either <span class="keyword">do</span> not <span class="built_in">enable</span> the modules, or install the OpenSSL library</span><br><span class="line">into the system, or build the OpenSSL library statically from the <span class="built_in">source</span></span><br><span class="line">with nginx by using --with-openssl=&lt;path&gt; option.</span><br></pre></td></tr></table></figure>

<p>缺少安装包，可能是之前的环境出现问题，重新安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/10-update.png" class>

<p>更新完毕，再次执行配置命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --without-http_rewrite_module</span><br></pre></td></tr></table></figure>

<p>配置成功！</p>
<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/11-success.png" class>

<h1 id="编译和安装"><a href="#编译和安装" class="headerlink" title="编译和安装"></a>编译和安装</h1><p>在解压后的目录进行编译和安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/12-make.png" class>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/13-make-install.png" class>

<h1 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/14-start.png" class>

<p>访问 <a href="http://localhost/">http://localhost:80</a> ，可以看到欢迎页面。</p>
<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/15-view.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/16-stop.png" class>

<p>访问 <a href="http://localhost/">http://localhost:80</a> ，连接失败。</p>
<img src="/2024/01/03/CentOS-7%E5%AE%89%E8%A3%85nginx/17-view.png" class>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_45316925/article/details/128957728">CentOs7 安装 nginx【详细】-CSDN</a></p>
]]></content>
      <categories>
        <category>Download &amp; Install &amp; Configure</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS-7 的下载、安装和配置</title>
    <url>/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="映像下载"><a href="#映像下载" class="headerlink" title="映像下载"></a>映像下载</h1><p>首先进入 CentOS 的<a href="https://mirrors.bupt.edu.cn/centos/7.9.2009/isos/x86_64/">镜像下载站</a>，然后下载标准版。</p>
<span id="more"></span>

<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/01-centos7-mirrors.png" class>

<p>下载完毕，记住 iso 文件所在位置。</p>
<h1 id="虚拟机创建"><a href="#虚拟机创建" class="headerlink" title="虚拟机创建"></a>虚拟机创建</h1><p>打开 VMware Workstation，然后点击 <code>创建虚拟机</code> 。</p>
<p>选择 <code>自定义安装</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/02-create-vm.png" class>

<p>默认，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/03-hardware-function.png" class>

<p>选择 <code>稍候安装操作系统</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/04-install-os.png" class>

<p>选择 <code>Linux(L)</code> ，选择 <code>CentOS 7 64位</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/05-choose-os.png" class>

<p>设置 <code>虚拟机名称</code> ，选择 <code>位置</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/06-name-and-location.png" class>

<p>选择 <code>指定处理器数量</code> ，数量越多，性能越好，根据需要分配。然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/07-cpu-core.png" class>

<p>根据需要 <code>分配内存</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/08-memory.png" class>

<p>网络连接选择 NAT，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/09-network.png" class>

<p>默认，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/10-SCSI.png" class>

<p>默认，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/11-disk.png" class>

<p>选择 <code>创建新虚拟硬盘</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/12-create-new-disk.png" class>

<p>指定 <code>磁盘容量</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/13-max-disk.png" class>

<p>指定 <code>磁盘文件存储</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/14-disk-location.png" class>

<p>点击 <code>完成</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/15-complete.png" class>

<h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><p>点击 <code>编辑虚拟机设置</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/16-edit-setting.png" class>

<p>点击 <code>硬件</code> 下的 <code>CD/DVD</code> ，选择 <code>使用ISO映像文件</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/17-choose-iso.png" class>

<p>点击 <code>开启此虚拟机</code> ，选择 <code>Install CentOS 7</code>，然后 <code>ENTER</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/18-start-vm.png" class>

<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>选择语言为 <code>中文</code> ，然后点击 <code>继续</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/19-chinese.png" class>

<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>点击 <code>软件安装</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/20-software.png" class>

<p>选择 <code>GNOME</code> 桌面，附加选项勾选 <code>GNOME 应用程序</code> , <code>传统 X Windows 系统的兼容性</code> 和 <code>开发工具</code> ，然后点击 <code>完成</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/21-desk.png" class>

<h2 id="安装位置"><a href="#安装位置" class="headerlink" title="安装位置"></a>安装位置</h2><p>点击 <code>安装位置</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/22-install-location.png" class>

<p>选择 <code>我要配置分区</code> ，然后点击 <code>完成</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/23-configuration-sector.png" class>

<p>设置 <code>/boot</code> ，点击 <code>+</code> 添加挂载点，挂载点选择 <code>/boot</code> ，期待容量设为 <code>1024</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/24-choose-boot.png" class>

<p>设置 <code>/swap</code> ，点击 <code>+</code> 添加挂载点，挂载点选择 <code>/swap</code> ，期待容量设为 <code>2048</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/25-choose-swap.png" class>

<p>设置 <code>/</code> ，点击 <code>+</code> 添加挂载点，挂载点选择 <code>/</code> ，期待容量设为 <code>17408</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/26-choose-root.png" class>

<p>点击 <code>完成</code> ，点击 <code>接收更改</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/27-accept-alter.png" class>

<h2 id="网络和主机名"><a href="#网络和主机名" class="headerlink" title="网络和主机名"></a>网络和主机名</h2><p>点击 <code>网络和主机名</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/28-network.png" class>

<p><code>打开</code> 以太网，设置 <code>主机名</code> ，点击 <code>应用</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/29-set-network.png" class>

<p>点击 <code>开始安装</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/30-install.png" class>

<h2 id="ROOT-密码"><a href="#ROOT-密码" class="headerlink" title="ROOT 密码"></a>ROOT 密码</h2><p>点击 <code>ROOT 密码</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/31-password.png" class>

<p>设置 <code>Root 密码</code> 以及 <code>确认</code> ，点击 <code>完成</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/32-set-password.png" class>

<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>点击 <code>创建用户</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/33-user.png" class>

<p>设置 <code>用户名</code> 以及 <code>密码</code> ，点击 <code>完成</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/34-set-user.png" class>

<h2 id="安装重启"><a href="#安装重启" class="headerlink" title="安装重启"></a>安装重启</h2><p>熬过漫长的等待。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/35-wait.png" class>

<p>安装完成后，点击 <code>重启</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/36-reboot.png" class>

<h2 id="接收许可"><a href="#接收许可" class="headerlink" title="接收许可"></a>接收许可</h2><p>点击 <code>LICENSE INFORMATION</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/37-license.png" class>

<p>接受许可，点击 <code>完成</code> 后，点击 <code>完成配置</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/38-complete.png" class>


<h2 id="登录账户"><a href="#登录账户" class="headerlink" title="登录账户"></a>登录账户</h2><p>点击 <code>未列出</code> ，使用 root 登录。</p>


<p>输入 <code>用户名</code> 和 <code>密码</code> 完成登录。</p>


<h2 id="欢迎"><a href="#欢迎" class="headerlink" title="欢迎"></a>欢迎</h2><p>出现桌面，欢迎、输入页选择 <code>汉语</code> 。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/41-chinese.png" class>

<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/42-input.png" class>

<p>隐私页 <code>关闭 </code>位置服务。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/43-location.png" class>

<p>跳过在线帐号页。</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/44-skip.png" class>

<p>至此，CentOS-7 下载、安装和配置完毕！</p>
<img src="/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/45-centos-7.png" class>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/m0_51545690/article/details/123238360">超详细的 CentOS7 的下载安装配置教程-CSDN</a></p>
]]></content>
      <categories>
        <category>Download &amp; Install &amp; Configure</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Virtual Machine</tag>
      </tags>
  </entry>
  <entry>
    <title>C 语言</title>
    <url>/2024/03/15/C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="C-语言入门"><a href="#C-语言入门" class="headerlink" title="C 语言入门"></a>C 语言入门</h1><h2 id="C-环境设置"><a href="#C-环境设置" class="headerlink" title="C 环境设置"></a>C 环境设置</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>为了在 Windows 上安装 GCC，您需要安装 MinGW。为了安装 MinGW，请访问 MinGW 的主页 mingw-w64.org，进入 MinGW 下载页面，下载最新版本的 MinGW 安装程序，命名格式为 MinGW-<version>.exe。</version></p>
<p>当安装 MinGW 时，您至少要安装 gcc-core、gcc-g++、binutils 和 MinGW runtime，但是一般情况下都会安装更多其他的项。</p>
<p>添加您安装的 MinGW 的 bin 子目录到您的 PATH 环境变量中，这样您就可以在命令行中通过简单的名称来指定这些工具。</p>
<p>当完成安装时，您可以从 Windows 命令行上运行 gcc、g++、ar、ranlib、dlltool 和其他一些 GNU 工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Username&gt;gcc --version</span><br><span class="line">gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><h4 id="下载、安装和配置"><a href="#下载、安装和配置" class="headerlink" title="下载、安装和配置"></a>下载、安装和配置</h4><p>参考 <a href="https://freesianz.github.io/2024/01/03/CentOS-7%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/">CentOS-7 的下载、安装和配置</a>。</p>
<p>开启 CentOS 后，点击网络。</p>
<p>勾选 <code>自动连接</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/01-centos-network.png" class title="01-centos-network">

<p>检查 <code>IP地址</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/02-check-ip.png" class title="02-check-ip">

<h4 id="SecureCRT-连接"><a href="#SecureCRT-连接" class="headerlink" title="SecureCRT 连接"></a>SecureCRT 连接</h4><p>使用 SecureCRT 连接该虚拟机，参考 <a href="https://freesianz.github.io/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/">SecureCRT 的下载、安装和使用</a> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/03-connect.png" class title="03-connect">

<p>在 SecureCRT 中测试 Linux 常用命令。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/04-test.png" class title="04-test">

<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><h4 id="下载、安装和配置-1"><a href="#下载、安装和配置-1" class="headerlink" title="下载、安装和配置"></a>下载、安装和配置</h4><p>参考 <a href="https://freesianz.github.io/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/">Ubuntu-12.04 的下载、安装和配置</a>。</p>
<p>开启 Ubuntu 后，点击网络。</p>
<p>勾选 <code>自动连接</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/05-ubuntu-network.png" class title="05-ubuntu-network">

<p>检查 <code>IP地址</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/06-check-ip.png" class title="06-check-ip">

<p>使用如下命令安装所需要的一些包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim g++ openssh-server libgl1-mesa-dev</span><br></pre></td></tr></table></figure>

<p>报错，会发现没有更供安装的候选者。问题在于 <code>/etc/apt/sources.list</code> 里的源官方 <a href="http://cn.archive.ubuntu.com/">http://cn.archive.ubuntu.com</a> 已经不维护，而是重新放到 <a href="http://old-releases.ubuntu.com/ubuntu/">http://old-releases.ubuntu.com/ubuntu/</a> 。将源列表里的 <a href="http://cn.archive.ubuntu.com/">http://cn.archive.ubuntu.com</a> 修改为 <a href="http://old-releases.ubuntu.com/ubuntu/">http://old-releases.ubuntu.com/ubuntu/</a> ，即指定使用老版本的源，或者更换为国内的源。参考 <a href="https://www.zhihu.com/question/24836871">ubuntu 13.04 更新不到源，报 404 是怎么回事？</a> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/07-bug.png" class title="07-bug">

<p>再继续安装包就可以成功。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/08-install.png" class title="08-install">

<p>在等待过程中，下载 VMware Tools 。</p>
<p>首先点击 <code>虚拟机</code> ，点击 <code>VMware Tools 安装</code>。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/09-tools.png" class title="09-tools">

<p>使用 <code>mount</code> 命令查看挂载。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/10-mount.png" class title="10-mount">

<p>使用如下命令将压缩包复制到当前目录下，并解压该压缩包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /media/VMware\ Tools/VMwareTools-10.3.23-16594550.tar.gz .</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf VMwareTools-10.3.23-16594550.tar.gz</span><br></pre></td></tr></table></figure>

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/11-zxvf.png" class title="11-zxvf">

<p>解压完成后，使用 <code>ls</code> 目录查看多了一个目录 <code>vmware-tools-distrib</code> ，进入该目录。使用 <code>sudo ./vmware-install.pl</code> 目录安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">cd</span> vmware-tools-distrib</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/12-install.png" class title="12-install">

<p>VMware Tools 安装完毕后，检查所需要的包是否安装好。</p>
<p>首先是 <code>vim</code> ，使用如下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim</span><br></pre></td></tr></table></figure>

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/13-vim.png" class title="13-vim">

<p>然后是 <code>g++</code> 和 <code>gcc</code> ，使用如下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -v</span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/14-gplusplus.png" class title="14-gplusplus">

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/15-gcc.png" class title="15-gcc">

<p>然后是 <code>openssh-server</code> ，使用如下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -V</span><br></pre></td></tr></table></figure>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/15-openssh.png" class title="15-openssh">

<p>最后是 <code>libgl1-mesa-dev</code> ，使用如下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">glxinfo | grep <span class="string">&quot;OpenGL version&quot;</span></span><br></pre></td></tr></table></figure>

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/16-opengl.png.png" class title="16-opengl">

<h4 id="安装-Qt-5-3-1"><a href="#安装-Qt-5-3-1" class="headerlink" title="安装 Qt 5.3.1"></a>安装 Qt 5.3.1</h4><p>接下来安装 Qt 5.3.1 ，下载地址在 <a href="https://download.qt.io/new_archive/qt/5.3/5.3.1/">https://download.qt.io/new_archive/qt/5.3/5.3.1/</a> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/17-QT-download.png" class title="17-QT-download">

<p>将文件拖拽复制到桌面，使用如下命令运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br><span class="line">ll</span><br><span class="line"><span class="built_in">chmod</span> +x qt-opensource-linux-x86-5.3.1.run</span><br><span class="line">sudo ./qt-opensource-linux-x86-5.3.1.run</span><br></pre></td></tr></table></figure>

<p><img src="/C%E8%AF%AD%E8%A8%80/" alt="18-copy-to-desktop"></p>
<p>使用 Qt5.3.1 设置向导，点击 <code>下一步</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/19-welcome.png" class title="19-welcome">

<p>默认安装目录，点击 <code>下一步</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/20-folder.png" class title="20-folder">

<p>默认勾选（检查 gcc 和 Tools 是否勾选），点击 <code>下一步</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/21-tools.png" class title="21-tools">

<p>勾选 I have read … ，点击 <code>下一步</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/22-accept.png" class title="22-accept">

<p>点击 <code>安装</code> ，等待安装。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/23-install.png" class title="23-install">

<p>配置环境变量，打开终端。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure>

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/24-terminal.png" class title="24-terminal">

<p>最后添加以下内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> QTDIR=/opt/Qt5.3.1/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$QTDIR</span>/bin:<span class="variable">$PATH</span>:<span class="variable">$QTDIR</span>/5.3/gcc/bin</span><br><span class="line"><span class="built_in">export</span> MANPATH=<span class="variable">$QTDIR</span>/man:<span class="variable">$MANPATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$QTDIR</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/25-vim-variable.png" class title="25-vim-variable">

<p>使用 <code>source</code> 命令使修改生效， <code>qmake</code> 命令测试环境变量是否设置成功。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/26-source-qmake.png" class title="26-source-qmake">

<p>Qt 5.3.1 已经安装完成，点击 完成 退出向导。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/27-complete.png" class title="27-complete">

<p>双击 Qt Creator ，新建项目，全部默认，点击运行按钮，若弹框说明成功。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/28-success.png" class title="28-success">

<h4 id="SecureCRT-连接-1"><a href="#SecureCRT-连接-1" class="headerlink" title="SecureCRT 连接"></a>SecureCRT 连接</h4><p>使用 SecureCRT 连接该虚拟机，参考 <a href="https://freesianz.github.io/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/">SecureCRT 的下载、安装和使用</a> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/29-connect.png" class title="29-connect">

<p>在 SecureCRT 中测试 Linux 常用命令。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/30-test.png" class title="30-test">

<h3 id="Solaris"><a href="#Solaris" class="headerlink" title="Solaris"></a>Solaris</h3><h4 id="下载、安装和配置-2"><a href="#下载、安装和配置-2" class="headerlink" title="下载、安装和配置"></a>下载、安装和配置</h4><p>参考 <a href="https://freesianz.github.io/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/">Solaris10 的下载、安装和配置</a>。</p>
<p>成功进入系统后，接下来进行一些配置。</p>
<p>右键，点击 <code>打开终端</code> ，打开终端。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/31-terminal.png" class title="31-terminal">

<p>运行一些 Linux 常用命令，并将 <code>shell</code> 改为 <code>bash</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/32-bash.png" class title="32-bash">

<p>测试 <code>gcc</code> ，返回 gcc 未找到，进行配置。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/33-gcc-unfind.png" class title="33-gcc-unfind">

<p>点击 <code>本计算机</code> &gt; <code>应用程序</code> &gt; <code>编程</code> &gt; <code>程序编辑器</code> 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/34-application.png" class title="34-application">

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/35-program.png" class title="35-program">

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/36-editor.png" class title="36-editor">

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/37-je.png" class title="37-je">

<p>将 <code>/etc/skel/local.profile</code> 文件复制到指定目录下。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/38-copy.png" class title="38-copy">

<p>使用 程序编辑器 打开复制后的文件，添加如下图所示的内容并保持。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/39-open.png" class title="39-open">

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/40-save.png" class title="40-save">

<p>使用 <code>source</code> 命令让修改生效，之后重启系统。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/41-source.png" class title="41-source">

<p>输入 <code>用户名</code> 和 <code>口令</code> 登入系统。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/42-user.png" class title="42-user">

<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/43-pwd.png" class title="43-pwd">

<p>测试 <code>gcc</code> 和 <code>g++</code> ，成功返回版本，配置成功。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/44-version.png" class title="44-version">

<p>打开 <code>程序编辑器</code> ，编写 <code>helloworld.c</code> 测试。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/45-helloworld.png" class title="45-helloworld">

<p>终端编译 <code>helloworld.c</code> ，得到 <code>a.out</code> 并运行。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/46-complie-run.png" class title="46-complie-run">

<h2 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C 程序结构"></a>C 程序结构</h2><h3 id="C-Hello-World-实例"><a href="#C-Hello-World-实例" class="headerlink" title="C Hello World 实例"></a>C Hello World 实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C 程序主要包括以下部分：预处理器指令、函数、变量、语句 &amp; 表达式和注释。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><code>#include &lt;stdio.h&gt;</code> 是预处理器指令，告诉 C 编译器在实际编译之前要包含 stdio.h 文件。要使用某个库函数，就要提前包含对应的头文件，比如要使用 <code>printf</code> 库函数，就要包含 <code>stdio.h</code> 头文件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>int main()</code> 是主函数，程序从这里开始执行。一个 C 程序必须有且仅有一个主函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>printf()</code> 是 C 中另一个可用的函数，向标准输出设备输出信息。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><code>return 0;</code> 表示终止 <code>main()</code> 函数，并返回值 0。<code>return</code> 是 C 语言的一个关键字。</p>
<h3 id="编译-执行-C-程序"><a href="#编译-执行-C-程序" class="headerlink" title="编译 &amp; 执行 C 程序"></a>编译 &amp; 执行 C 程序</h3><p>1.打开一个文本编辑器，添加上述代码。<br>2.保存文件为 HelloWorld.c。<br>3.打开命令提示符，进入到保存文件所在的目录。<br>4.键入 gcc HelloWorld.c，输入回车，编译代码。<br>5.如果代码中没有错误，命令提示符会跳到下一行，并生成 a.out（Windows 生成 a.exe） 可执行文件。<br>6.现在，键入 a.out 来执行程序。<br>7.您可以看到屏幕上显示 “Hello World”。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Username&gt;gcc HelloWorld.c</span><br><span class="line"></span><br><span class="line">C:\Users\Username&gt;a.exe</span><br><span class="line">Hello World</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="C-基本语法"><a href="#C-基本语法" class="headerlink" title="C 基本语法"></a>C 基本语法</h2><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>在 C 程序中，分号是语句结束符。</p>
<p>每个语句必须以分号结束，它表明一个逻辑实体的结束。</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>C 语言有两种注释方式：</p>
<p>1.以 <code>//</code> 开始的单行注释，这种注释可以单独占一行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br></pre></td></tr></table></figure>

<p>2.这种格式的注释 <code>/* */</code> 可以单行或多行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 单行注释 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>1.不能在注释内嵌套注释。</p>
<p>2.注释不能出现在字符串或字符值中。</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。</p>
<p>一个标识符的组成：<br>1.字母 <code>A-Z</code> 或 <code>a-z</code> 或下划线 <code>_</code> 开始；<br>2.后跟零个或多个字母、下划线和数字（0-9）。</p>
<p>C 标识符内不允许出现标点字符，比如 @、$ 和 %。</p>
<p>C 是区分大小写的编程语言，因此在 C 中，Manpower 和 manpower 是两个不同的标识符。</p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><a href="https://blog.csdn.net/weixin_42528287/article/details/126863647">下表</a> 列出了 C 中的保留字。</p>
<p>这些保留字不能作为常量名、变量名或其他标识符名称。</p>
<p>1989 年，ANSI 发布了第一个完整的 C 语言标准 —— ANSI X3.159—1989，简称 C89 ，人们也习惯称其为 ANSI C 。</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/47-C89.png" class title="46-C89">

<p>1999 年，在做了一些必要的修正和完善后，ISO 发布了新的 C 语言标准，命名为 ISO&#x2F;IEC 9899：1999，简称 C99 。（新增 5 个关键字）</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/48-C99.png" class title="48-C99">

<p>2011 年 12 月 8 日，ISO 又正式发布了新的标准，称为 ISO&#x2F;IEC9899: 2011，简称为 C11 。（C11 新增 7 个关键字）</p>
<img src="/2024/03/15/C%E8%AF%AD%E8%A8%80/49-C11.png" class title="49-C11">

<p>所以最新的 C11 标准 C 语言关键字总共有 44 个。</p>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>只包含空格的行，被称为空白行，C 编译器会完全忽略它。</p>
<p>在 C 中，空格用于描述空白符、制表符、换行符和注释。</p>
<p>空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。</p>
<h2 id="System-系统调用"><a href="#System-系统调用" class="headerlink" title="System 系统调用"></a>System 系统调用</h2><p><code>system()</code> 是一个 C 库函数，作用是执行操作系统的命令或者运行指定的程序。要使用 <code>system()</code> 库函数，要包含 <code>stdlib.h</code> 头文件</p>
<h3 id="Windows-Command"><a href="#Windows-Command" class="headerlink" title="Windows Command"></a>Windows Command</h3><p>Windows 下，比如：</p>
<p>使用 <code>notepad</code> 命令可以打开记事本；<br>使用 <code>control</code> 命令可以打开控制面板；<br>使用 <code>type</code> 命令可以显示文本文件的内容；<br>使用 <code>msdt</code> 命令可以打开微软支持诊断工具；<br>使用 <code>tasklist</code> 命令可以显示当前正在运行的进程的列表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Username&gt;notepad</span><br><span class="line"></span><br><span class="line">C:\Users\Username&gt;control</span><br><span class="line"></span><br><span class="line">C:\Users\Username&gt;<span class="built_in">type</span> a.c</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C:\Users\Username&gt;msdt</span><br><span class="line"></span><br><span class="line">C:\Users\Username&gt;tasklist</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话<span class="comment">#       内存使用</span></span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">System Idle Process              0 Services                   0          8 K</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>下载 <a href="https://download.microsoft.com/download/5/8/9/58911986-D4AD-4695-BF63-F734CD4DF8F2/ws-commands.pdf">官方文档 《Windows Command Reference》</a> 查看更多命令。</p>
<h3 id="Windows-VS-Unix"><a href="#Windows-VS-Unix" class="headerlink" title="Windows VS Unix"></a>Windows VS Unix</h3><h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	system(<span class="string">&quot;notepad&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Windows 下打开一个文本编辑器，添加上述代码。编译并执行该 C 程序，记事本被打开。如果第 5 行代码为 <code>system(&quot;calc&quot;);</code>，那么计算器被打开。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	    system(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Windows 下打开一个文本编辑器，添加上述代码。编译并执行该 C 程序，计算器被打开，关闭后再次被打开，一直循环直到程序奔溃。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">	    system(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Windows 下打开一个文本编辑器，添加上述代码。编译并执行该 C 程序，计算器被打开 10 次（个）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">    i = system(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>,i);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Username&gt;HelloWorld</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line">C:\Users\Username&gt;System</span><br><span class="line">Hello World</span><br><span class="line">i = 0</span><br></pre></td></tr></table></figure>

<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	system(<span class="string">&quot;ls -l&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Linux 下使用 <code>vi</code> 新建文件，添加上述代码。编译并执行该 C 程序，该目录下的文件被列出。如果第 5 行代码为 <code>system(&quot;ps -aux&quot;);</code>，那么显示当前正在运行的进程的列表。</p>
<p>waiting…</p>
<h3 id="POSIX-说明"><a href="#POSIX-说明" class="headerlink" title="POSIX 说明"></a>POSIX 说明</h3><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.runoob.com/cprogramming/c-program-structure.html">C 程序结构 | 菜鸟教程</a></p>
<p><a href="https://bbs.itheima.com/thread-338418-1-1.html">2017 C&#x2F;C++ 学习路线图（附全套自学视频+工具） | 倾心莫若初见</a></p>
<p><a href="https://blog.csdn.net/weixin_42528287/article/details/126863647">C语言关键字之 C89、C99、C11 关键字 | CSDN博客</a></p>
]]></content>
      <categories>
        <category>C &amp; C plus plus</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>HElib</title>
    <url>/2023/12/28/HElib/</url>
    <content><![CDATA[<h1 id="HElib-库介绍"><a href="#HElib-库介绍" class="headerlink" title="HElib 库介绍"></a>HElib 库介绍</h1><p>HElib(Homomorphic Encryption library)是一个用于同态加密的开源库。HElib 主要由 Shai Halevi 和 Victor Shoup 开发，在 Craig Gentry 担任 IBM 研究员后不久，最初发布于2013年5月5日。HElib 是用 C++ 编写的，并使用 NTL 数学库。</p>
<span id="more"></span>

<p>以下是 HElib 的一些主要特点和功能 :</p>
<p>1.支持多种同态加密方案。支持多种同态加密方案，其中包括 BGV(Brakerski-Gentry-Vaikuntanathan)、BFV(Brakerski&#x2F;Fan-Vercauteren)和 CKKS(Cheon-Kim-Kim-Song)等。这些方案适用于不同的应用场景，包括整数算术、布尔电路评估和实数运算。</p>
<p>2.高性能的同态加密操作。HElib 在上述原始方案中引入了许多优化以加速同态运算，包括 Smart-Vercauteren 密文打包技术和 Gentry-Halevi-Smart 优化，提升了算法的整体运行效率，这对于在实际应用中处理大规模数据集或复杂计算任务至关重要。</p>
<p>3.C++实现。HElib 使用 C++ 编写，为开发人员提供了一个灵活而高效的编程框架。这使得开发人员可以轻松地集成 HElib 到他们的应用中，并实现自定义的同态计算。</p>
<p>4.HElib 提供了一种“同态加密汇编语言”，支持 “set”、“add”、“multiply”、“shift” 等基本操作指令，此外还提供了自动噪声管理、改进的 “Bootstrapping” 方法、多线程等功能。</p>
<p>HElib 的 Github 主页在 : <a href="https://github.com/homenc/HElib">https://github.com/homenc/HElib</a> 。</p>
<!--more-->

<h1 id="安装与构建"><a href="#安装与构建" class="headerlink" title="安装与构建"></a>安装与构建</h1><p>HElib 构建、安装和回归测试套件已在 Ubuntu 18.04、Ubuntu 20.04、Fedora 32、Fedora 33、CentOS 7.8、CentOS 8.2、macOS Mojave &gt;&#x3D; 10.14.6 和 macOS Catalina &gt;&#x3D; 10.15.7 上构建和测试。</p>
<p>有两种不同的方法来建造和安装 HElib。第一个将自动下载并构建 GMP 和 NTL 依赖项，并将库打包到一个可重定位的文件夹中。相反，第二种方法要求您安装依赖项，并且这些依赖项在系统中可用。</p>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><h3 id="一般先决条件"><a href="#一般先决条件" class="headerlink" title="一般先决条件"></a>一般先决条件</h3><p>GNU make &gt;&#x3D; 3.82</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ make -v                        </span><br><span class="line">GNU Make 4.3</span><br><span class="line">Built <span class="keyword">for</span> x86_64-pc-linux-gnu</span><br><span class="line">Copyright (C) 1988-2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br></pre></td></tr></table></figure>

<p>pthreads</p>
<p>git &gt;&#x3D; 1.8.3 (required to build and run the HElib test suite)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ git --version                                   </span><br><span class="line">git version 2.39.2</span><br></pre></td></tr></table></figure>


<h3 id="Linux-environment"><a href="#Linux-environment" class="headerlink" title="Linux environment"></a>Linux environment</h3><p>g++ &gt;&#x3D; 7.3.1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ g++ -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=g++</span><br><span class="line">COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/12/lto-wrapper</span><br><span class="line">OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa</span><br><span class="line">OFFLOAD_TARGET_DEFAULT=1</span><br><span class="line">Target: x86_64-linux-gnu</span><br><span class="line">Configured with: ...</span><br><span class="line">Thread model: posix</span><br><span class="line">Supported LTO compression algorithms: zlib zstd</span><br><span class="line">gcc version 12.2.0 (Debian 12.2.0-14)</span><br></pre></td></tr></table></figure>

<p>cmake &gt;&#x3D; 3.10.2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cmake -version</span><br><span class="line">cmake version 3.27.9</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure>

<h3 id="macOS-environment"><a href="#macOS-environment" class="headerlink" title="macOS environment"></a>macOS environment</h3><p>Apple clang &gt;&#x3D; 11.0.0 (available with the latest Xcode for the tested versions of macOS)</p>
<p>Xcode Command Line Tools (can be installed with the command xcode-select –install in a teminal)</p>
<p>cmake &gt;&#x3D; 3.17.3 (available from CMake or MacPorts Project and Homebrew as packages)</p>
<h3 id="For-development"><a href="#For-development" class="headerlink" title="For development"></a>For development</h3><p>clang-format &gt;&#x3D; 9.0.0 (available with your linux distribution and for macOS from MacPorts Project and Homebrew as packages)</p>
<h2 id="选项1-包构建-推荐"><a href="#选项1-包构建-推荐" class="headerlink" title="选项1 :包构建(推荐)"></a>选项1 :包构建(推荐)</h2><p>该选项将 HElib 及其依赖项(NTL和GMP)捆绑在一个目录中，然后可以在系统中自由移动。NTL 和 GMP 将被自动获取和编译。它可以全局安装(即 <code>/usr/local</code> )，如果未指定 <code>CMAKE_INSTALL_PREFIX</code>，则该选项为默认选项，但这应谨慎进行，因为现有版本的 NTL、GMP 或 HElib 将被覆盖。在这种情况下，需要另外两个先决条件:</p>
<p>m4 &gt;&#x3D; 1.4.16</p>
<blockquote>
<p>m4 是一种宏处理器，它扫描用户输入的文本并将其输出，期间如果遇到宏就将其展开后输出。宏有两种，一种是内建的，另一种是用户定义的，它们能接受任意数量的参数。除了做展开宏的工作之外，m4 内建的宏能够加载文件，执行 Shell 命令，做整数运算，操纵文本，形成递归等等。m4 可用作编译器的前端，或者单纯作为宏处理器来用。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ m4 --version</span><br><span class="line">m4 (GNU M4) 1.4.19</span><br><span class="line">Copyright (C) 2021 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Written by René Seindal.</span><br></pre></td></tr></table></figure>

<p>patchelf &gt;&#x3D; 0.9(如果构建在Linux上)</p>
<p>patchelf 是一个用来修改 elf 格式的动态库和可执行程序的小工具，可以修改动态链接库的库名字，以及链接库的 RPATH。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ patchelf --version</span><br><span class="line">patchelf 0.18.0</span><br></pre></td></tr></table></figure>

<p>请注意，如果从库构建更改为包构建，使用干净的构建目录会更安全。</p>
<h3 id="HElib-构建"><a href="#HElib-构建" class="headerlink" title="HElib 构建"></a>HElib 构建</h3><p>1.下载 HElib 并解压 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/homenc/HElib/archive/v2.1.0.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf v2.1.0.tar.gz</span><br></pre></td></tr></table></figure>

<p>2.创建一个构建目录，通常作为 <code>src</code> 的同级:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> HElib-2.1.0/ HElib</span><br><span class="line"><span class="built_in">cd</span> HElib</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure>

<p>3.运行 cmake 配置步骤，指定您需要一个包构建(通过 <code>-DPACKAGE_BUILD=ON</code> )，并说明您希望安装的位置。例如，要在 <code>/home/kali/helib_install</code> 中安装 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -DPACKAGE_BUILD=ON -DCMAKE_INSTALL_PREFIX=/home/kali/helib_install ..</span><br></pre></td></tr></table></figure>

<p>可以在这里指定额外的选项，例如 <code>-DENABLE_TEST=ON</code> 启用 HElib 测试 。</p>
<p>4.编译，指定可选的线程数(本例中为16)。其输出将位于可重定位文件夹 helib_pack中 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j16</span><br></pre></td></tr></table></figure>

<p><code>make -j16</code> 要求高配置，低配置服务器指定较小的进程数，如 <code>make -j4</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">──(kali㉿kali)-[~/Documents/HElib/build]</span><br><span class="line">└─$ make -j4</span><br><span class="line">[  0%] Built target setup_install_dir</span><br><span class="line">...</span><br><span class="line">Install the project...</span><br><span class="line">-- Install configuration: &quot;RelWithDebInfo&quot;</span><br><span class="line">...</span><br><span class="line">[ 79%] Completed &#x27;helib_external&#x27;</span><br><span class="line">[100%] Built target helib_external</span><br></pre></td></tr></table></figure>

<p>执行该命令时，报错如下 :</p>
<img src="/2023/12/28/HElib/error-make-j4.png" class>

<p>解决方法 :</p>
<p>在报错路径文件 <code>Context.h</code> 添加头文件 <code>#include &lt;optional&gt;</code> 。</p>
<p>5.【可选】如果在 <code>-DENABLE_TEST=ON</code> 的情况下执行步骤2，HElib 测试可以按如下方式运行 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctest</span><br></pre></td></tr></table></figure>

<p>详细的 HElib 专用测试日志可在 <code>Testing/Temporary/LastTest.log</code> 中找到。</p>
<p>waiting…</p>
<p>6.【可选】运行安装步骤，将文件夹复制到(在本例中为 <code>/home/kali/helib_install</code>) :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>当然，如果保持默认或一些其他系统范围的路径，步骤5可能需要特权。</p>
<h2 id="选项2-库构建-高级"><a href="#选项2-库构建-高级" class="headerlink" title="选项2 :库构建(高级)"></a>选项2 :库构建(高级)</h2><p>该方案涉及自行建造 HElib，与系统上已存在的依赖关系(NTL 和 GMP)相联系。这样，HElib 库可以四处移动，但是它的依赖项(NTL 和 GMP)不能，因为它们是绝对路径。对于此选项，您必须自己构建 GMP &gt;&#x3D;6.0.0 和 NTL &gt;&#x3D;11.4.3。</p>
<p>…</p>
<h2 id="HElib-构建选项"><a href="#HElib-构建选项" class="headerlink" title="HElib 构建选项"></a>HElib 构建选项</h2><h3 id="通用选项"><a href="#通用选项" class="headerlink" title="通用选项"></a>通用选项</h3><ul>
<li><p><code>BUILD_SHARED=ON/OFF</code> (默认为 <code>OFF</code> ) :构建为共享库。</p>
</li>
<li><p><code>CMAKE_BUILD_TYPE</code> (默认为 <code>RelWithDebInfo</code> ) :选择构建的类型，选项有<code>Debug</code>、<code>RelWithDebInfo</code>、<code>Release</code>、<code>MinSizeRel</code>。</p>
</li>
<li><p><code>CMAKE_INSTALL_PREFIX</code>  :所需的 HElib 安装目录。</p>
</li>
<li><p><code>ENABLE_TEST=ON/OFF</code> (默认值为 <code>OFF</code> ) :启用测试构建。</p>
</li>
<li><p><code>ENABLE_THREADS=ON/OFF</code> (默认值为 <code>ON</code> ) :启用线程支持</p>
</li>
<li><p><code>PEDANTIC_BUILD=ON/OFF</code> (默认为 <code>ON</code> ) :使用 <code>-Wall -Wpedantic -Wextra -Werror</code> 在构建期间。</p>
</li>
<li><p><code>HELIB_DEBUG=ON/OFF</code>(默认为 <code>OFF</code> ) :在构建 HElib 时激活调试模块(通过定义 <code>HELIB_DEBUG</code> 宏)。当调试模块处于活动状态时，将生成用于调试目的的额外信息。</p>
</li>
</ul>
<p>当使用 cmake 时，<code>HELIB_DEBUG</code> 将传播到使用 HElib 的程序。如果启用此选项，使用 HElib 的程序将在配置期间生成一个警告。这是为了提醒用户，如果初始化不正确，使用调试模块可能会导致问题，比如 sigsegv。</p>
<h3 id="选项1-包构建-的特定参数"><a href="#选项1-包构建-的特定参数" class="headerlink" title="选项1(包构建)的特定参数"></a>选项1(包构建)的特定参数</h3><ul>
<li><p><code>PACKAGE_DIR</code> :包构建将被安装到的位置。默认 <code> $&#123;CMAKE_INSTALL_PREFIX&#125;/helib_pack</code>。</p>
</li>
<li><p><code>FETCH_GMP</code> :是否提取和建立 GMP。默认为 <code>ON</code> 。如果设置为 <code>OFF</code> ，应该存在系统安装的 GMP 库，或者 <code>GMP_DIR</code> 应该指向有效的GMP前缀。</p>
</li>
<li><p><code>GMP_DIR</code> :GMP 库的前缀。如果 <code>FETCH_GMP=ON</code> ，则忽略。</p>
</li>
</ul>
<h3 id="选项2-库构建-的特定参数"><a href="#选项2-库构建-的特定参数" class="headerlink" title="选项2(库构建)的特定参数"></a>选项2(库构建)的特定参数</h3><p>…</p>
<h1 id="在项目中使用-HElib"><a href="#在项目中使用-HElib" class="headerlink" title="在项目中使用 HElib"></a>在项目中使用 HElib</h1><h2 id="标准方法"><a href="#标准方法" class="headerlink" title="标准方法"></a>标准方法</h2><p>在选项1或选项2中运行 <code>make install</code> 之后，可以在 <code>lib</code> 中找到所需的共享库文件以及 <code>include</code> 中的头文件。这些可以按照您所选择的构建系统的首选方式使用。</p>
<h2 id="用-cmake-构建包"><a href="#用-cmake-构建包" class="headerlink" title="用 cmake 构建包"></a>用 cmake 构建包</h2><p>如果在 cmake 项目中使用 HElib，还有一种更简单的方法。</p>
<p>1.在 <code>CMakeLists.txt</code> 中包含以下行 :</p>
<p>2.使用 <code>-Dhelib_DIR=&lt;helib install prefix&gt;/share/cmake/helib</code> 运行 <code>cmake</code> 步骤。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>在 <code>examples</code> 目录中可以找到使用 HElib 的基于 cmake 的项目的完整工作示例。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://en.wikipedia.org/wiki/HElib">HElib&#x2F;Wikipedia</a></p>
<p><a href="https://www.cnblogs.com/pam-sh/p/14524581.html">HElib&#x2F;PamShao&#x2F;博客园</a></p>
<p><a href="https://zpan-pam.oss-cn-shanghai.aliyuncs.com/video/INSTALL.pdf">Official Installation Documentation</a></p>
<p><a href="https://segmentfault.com/a/1190000004104696#GNU%20M4%20%E7%AE%80%E4%BB%8B">GNU m4&#x2F;宏&#x2F;SegmentFault</a></p>
<p><a href="https://www.cnblogs.com/ar-cheng/p/13225342.html">rpath和patchelf&#x2F;zaliasc&#x2F;博客园</a></p>
]]></content>
      <categories>
        <category>Homomorphic Encryption</category>
      </categories>
      <tags>
        <tag>Open Source Library</tag>
      </tags>
  </entry>
  <entry>
    <title>Listary 的安装和使用</title>
    <url>/2024/03/16/Listary%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="https://assets-global.website-files.com/643e09c9f19df8579c420d9f/655f6daa30360d26544fd098_Listary-hero-screenshot-p-1080.png" alt="Listary"></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Listary 是一款强大的 Windows 文件搜索和应用启动工具。它通过只需几个快捷键就能轻松找到文件并启动应用程序，提高生产力。该软件在后台运行，但可随时从任何地方访问。Listary Pro 为需要更多功能的工作或家庭用户提供了先进的特性和命令。也有一个便携版本，可以在不安装到 Windows 的情况下，从云文件夹、外部驱动器或本地文件夹中运行。</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.listary.com/">https://www.listary.com/</a></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><a href="https://help.listary.com/zh-Hans/">https://help.listary.com/zh-Hans/</a></p>
]]></content>
      <categories>
        <category>Download &amp; Install &amp; Configure</category>
      </categories>
      <tags>
        <tag>Efficiency</tag>
        <tag>Search</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT 主题下载、配置以及美化</title>
    <url>/2023/12/24/NexT%E4%B8%BB%E9%A2%98%E4%B8%8B%E8%BD%BD%E3%80%81%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>本博客使用的是 NexT 主题，更多主题在 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 。</p>
<h1 id="下载-NexT"><a href="#下载-NexT" class="headerlink" title="下载 NexT"></a>下载 NexT</h1><p>使用 git clone 下载 Next，也可以通过 npm 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> FileName</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h1><p>Hexo 配置文件：<code>_config.yml</code> 。</p>
<blockquote>
<p>配置时注意 <code>: </code> 冒号后的空格。</p>
</blockquote>
<p>配置可参考官方文档：<a href="https://hexo.io/docs/configuration.html%E3%80%82">https://hexo.io/docs/configuration.html。</a></p>
<h2 id="Site-配置"><a href="#Site-配置" class="headerlink" title="Site 配置"></a>Site 配置</h2><table>
<thead>
<tr>
<th>Setting</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>您网站的标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>您网站的副标题</td>
</tr>
<tr>
<td>description</td>
<td>您网站的描述</td>
</tr>
<tr>
<td>keywords</td>
<td>您网站的关键字。支持多个值。</td>
</tr>
<tr>
<td>author</td>
<td>你的名字</td>
</tr>
<tr>
<td>language</td>
<td>您网站的语言。</td>
</tr>
<tr>
<td>timezone</td>
<td>您网站的时区。</td>
</tr>
</tbody></table>
<p>其中 <code>language</code> 要显示中文的话值为 <code>zh-CN</code>，<code>timezone</code> 的值必须为 <code>Asia/Shanghai</code>，与 Hexo 时区一致，否则 Hexo 运行失败。</p>
<h2 id="URL-配置"><a href="#URL-配置" class="headerlink" title="URL 配置"></a>URL 配置</h2><table>
<thead>
<tr>
<th>Setting</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>您网站的 URL，必须以 <code>http://</code> 或 <code>https://</code> 开头。</td>
</tr>
</tbody></table>
<p>例如我的 <code>url</code> 为：<a href="https://freesianz.github.io/">https://freesianz.github.io/</a> 。</p>
<h2 id="Extensions-配置"><a href="#Extensions-配置" class="headerlink" title="Extensions 配置"></a>Extensions 配置</h2><table>
<thead>
<tr>
<th>Setting</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>theme</td>
<td>主题名称。</td>
</tr>
</tbody></table>
<p>如果同样使用 NexT 主题，此处写 <code>next</code> 。</p>
<h1 id="美化-NexT"><a href="#美化-NexT" class="headerlink" title="美化 NexT"></a>美化 NexT</h1><p>Next 配置文件：<code>_config.yml</code> 。</p>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>waiting…</p>
<h2 id="代码块主题更改"><a href="#代码块主题更改" class="headerlink" title="代码块主题更改"></a>代码块主题更改</h2><p>Next 配置文件：<code>_config.yml</code> 。</p>
<p>可用主题在 <a href="https://theme-next.js.org/highlight/">https://theme-next.js.org/highlight/</a> 查看。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">github-dark</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">github-dark</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br><span class="line">  <span class="comment"># Fold code block</span></span><br><span class="line">  <span class="attr">fold:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure>

<h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>Next 配置文件：<code>_config.yml</code> 。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><code>scrollpercent</code> 的值为真开启浏览进度。如果 <code>sidebar</code> 的值为真，进度显示在侧栏。</p>
<h2 id="统计博客字数-估算阅读时间"><a href="#统计博客字数-估算阅读时间" class="headerlink" title="统计博客字数+估算阅读时间"></a>统计博客字数+估算阅读时间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br></pre></td></tr></table></figure>

<p>Hexo 配置文件：<code>_config.yml</code> 添加以下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Setting</th>
<th>Description</th>
<th>Values</th>
</tr>
</thead>
<tbody><tr>
<td>awl</td>
<td>平均字符长度</td>
<td>CN ≈ 2，EN ≈ 5，RU ≈ 6</td>
</tr>
<tr>
<td>wpm</td>
<td>每秒阅读的单词数</td>
<td>Slow ≈ 200，Normal ≈ 275，Fast ≈ 350</td>
</tr>
</tbody></table>
<p>中文的推荐配置为 <code>awl = 2</code> 和 <code>wpm = 300</code>。</p>
<h2 id="阅读全文"><a href="#阅读全文" class="headerlink" title="阅读全文"></a>阅读全文</h2><p>直接在文章中添加 <code>&lt;!--more--&gt;</code> 来控制摘要内容。</p>


<h2 id="修改加载动画"><a href="#修改加载动画" class="headerlink" title="修改加载动画"></a>修改加载动画</h2><p>Next 配置文件：<code>_config.yml</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">black</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">bounce</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>color</code> 为加载进度的颜色，<code>theme</code> 为加载进度的主题。</p>
<p>想要知道每个主题的效果，可通过 <a href="https://codebyzach.github.io/pace/">https://codebyzach.github.io/pace/</a> 来查看！</p>
<h2 id="添加运行时间"><a href="#添加运行时间" class="headerlink" title="添加运行时间"></a>添加运行时间</h2><p>在 <code>/themes/next/layout/_partials/footer.njk</code> 文件末尾加入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &lt;br /&gt; --&gt;</span><br><span class="line">&lt;!-- 网站运行时间的设置 --&gt;</span><br><span class="line">&lt;span id=&quot;timeDate&quot;&gt;计算天数中&lt;/span&gt;</span><br><span class="line">&lt;!-- &lt;span id=&quot;times&quot;&gt;计算天数时分秒中...&lt;/span&gt; --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    function createtime() &#123;</span><br><span class="line">        var grt= new Date(&quot;12/24/2023 17:00:00&quot;);//你的建站时间或者网站上线时间</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); </span><br><span class="line">        if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">        // var times = document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;Your Blog 已存在 &quot;+dnum+&quot; 天 &quot;+hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="修改-Tag-图标"><a href="#修改-Tag-图标" class="headerlink" title="修改 Tag 图标"></a>修改 Tag 图标</h2><p>Next 配置文件：<code>_config.yml</code> 。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Icon between year and copyright info.</span></span><br><span class="line"><span class="attr">icon:</span></span><br><span class="line">  <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span></span><br><span class="line">  <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">  <span class="attr">animated:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#ff0000&quot;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://fontawesome.com/icons">https://fontawesome.com/icons</a></p>
<h2 id="修改网站图标"><a href="#修改网站图标" class="headerlink" title="修改网站图标"></a>修改网站图标</h2><p>Next 配置文件：<code>_config.yml</code> 。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/_uploads/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/_uploads/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/_uploads/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/_uploads/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure>

<p>可使用 照片 或者 <a href="https://sspai.com/link?target=http://www.favicon-generator.org/">相关网站</a> 生成同尺寸图像。</p>
<p>本网站图标由 <a href="https://www.logosc.cn/logo/">https://www.logosc.cn/logo/</a> 生成。</p>
<h2 id="修改个人头像"><a href="#修改个人头像" class="headerlink" title="修改个人头像"></a>修改个人头像</h2><p>将原来的 <code>\themes\next\source\images</code> 下的 <code>avatar.png</code> 覆盖为自己想要的头像即可。</p>
<h2 id="图片圆角阴影"><a href="#图片圆角阴影" class="headerlink" title="图片圆角阴影"></a>图片圆角阴影</h2><p>在 <code>\themes\next\source\css\_common\components\post</code> 下的 <code>post-body.styl</code> 中修改：</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">iframe</span>, <span class="selector-tag">img</span>, <span class="selector-tag">video</span>, embed &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改背景图片"><a href="#修改背景图片" class="headerlink" title="修改背景图片"></a>修改背景图片</h2><p>首先将背景图片放入 <code>./themes/next/source/images</code> 中，命名为 <code>background.jpg</code> 。</p>
<p>在根目录而不是主题目录下的 <code>source</code> 文件夹下新建文件夹 <code>_data</code> 。</p>
<p>在该文件夹下新建文件 <code>styles.styl</code> ，输入以下代码：</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(/images/background.jpg);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123; </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后在主题目录下的 <code>_config.yml</code> 文件中找到 <code>custom_file_path</code> ，将对应的注释 # 去掉。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/mmzuo-798/p/10510225.html">Hexo server 报错 TypeError: Cannot read property ‘utcOffset’ of null 解决方法 | 博客园</a></p>
<p><a href="https://shallingzhang.github.io/2022/08/31/Hexo-Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%8D%9A%E5%AE%A2/#%E9%85%8D%E7%BD%AE">Hexo + Next 主题美化博客 | Shalling’s Blog</a><br><a href="https://sspai.com/post/59568">hexo next 主题优化-少数派</a><br><a href="https://www.cnblogs.com/factory/p/10567649.html">Hexo 的 next 主题安装-博客园</a><br><a href="http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/">Hexo 博客 NexT 主题的安装使用-Julian’s blog</a><br><a href="https://theme-next.js.org/pisces/">NexT | Theme for Hexo</a><br><a href="https://github.com/next-theme/hexo-theme-next?tab=readme-ov-file">NexT Theme | Github</a><br><a href="https://hexo.io/themes/">Themes | Hexo</a><br><a href="https://juejin.cn/post/6924497164362055693">玩遍博客网站，我整理了 Hexo 及其流行的风格主题 | 掘金</a><br><a href="https://zhuanlan.zhihu.com/p/491537945">8 款颜值爆赞的 Hexo 主题推荐！快来搭建个人博客玩玩 | 知乎</a><br><a href="https://juejin.cn/post/7169115268944560135">Hexo-Next 主题搭建个人博客最新配置教程 | 掘金</a></p>
<p><a href="https://www.snowmoon.top/2021/02/21/next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">next主题美化——背景图片、动画 | SnowMoon-Haoyu’s Blog</a></p>
]]></content>
      <categories>
        <category>How to Start a Personal Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>PALISADE</title>
    <url>/2024/01/01/PALISADE/</url>
    <content><![CDATA[<h1 id="PALISADE-库介绍"><a href="#PALISADE-库介绍" class="headerlink" title="PALISADE 库介绍"></a>PALISADE 库介绍</h1><p>PALISADE是一个通用的格密码库，目前包含以下格密码算法的有效实现：</p>
<table>
<thead>
<tr>
<th>全同态加密（FHE），包含如下方案：</th>
</tr>
</thead>
<tbody><tr>
<td>用于整数计算的 Brakerski &#x2F; Fan-Vercauteren（BFV）方案</td>
</tr>
<tr>
<td>用于整数计算的 Brakerski-Gentry-Vaikuntanathan（BGV）方案</td>
</tr>
<tr>
<td>用于实数计算的 Cheon-Kim-Kim-Song（CKKS）方案</td>
</tr>
<tr>
<td>用于布尔电路计算的 Ducas-Micciancio（FHEW）和Chillotti-Gama-Georgieva-Izabachene（TFHE）方案</td>
</tr>
<tr>
<td>有限整数计算的 Stehle-Steinfeld 方案</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>多方全同态加密包含如下方案：</th>
</tr>
</thead>
<tbody><tr>
<td>BGV，BFV和CKKS方案的门限FHE</td>
</tr>
<tr>
<td>BGV，BFV和CKKS方案的代理重加密</td>
</tr>
</tbody></table>
<p>此外还实现了数字签名、基于身份的加密密文策略和基于属性的加密。</p>
<span id="more"></span>

<p>PALISADE 是支持 Linux，Windows 和 macOS 的跨平台 C++11 库。</p>
<p>支持的编译器是 g++ v6.1 或更高版本以及 clang ++ v6.0或更高版本。</p>
<p>该库还包括单元测试和示例应用程序演示。</p>
<p>PALISADE 在 BSD-2 条款的许可下使用。</p>
<table>
<thead>
<tr>
<th>该库基于模块化体系结构，包含如下各层：</th>
</tr>
</thead>
<tbody><tr>
<td>数学运算层：支持一些基础计算，例如模算术，数论变换和整数采样。该层支持可移植到多种硬件计算框架下。</td>
</tr>
<tr>
<td>格运算层：支持格运算，环代数和格陷门采样。</td>
</tr>
<tr>
<td>加密层：包含各类格密码方案的有效实现。</td>
</tr>
<tr>
<td>编码层：为各种加密方案提供多种明文编码。</td>
</tr>
</tbody></table>
<p>PALISADE 的重点在于方案的可用性。例如，所有带有密文打包的 FHE 方案都使用相同的通用 API，并使用运行时多态性实现。</p>
<p>PALISADE 有效实现了的余数系统（RNS）算法，从而大幅提高 BGV，BFV 和 CKKS 等方案的性能。PALISADE 库被用作全基因组关联研究（GWAS）解决方案的库，在 iDASH’18 比赛上获奖。</p>
<p>默认情况下，该库的构建没有外部依赖关系。但是如果需要，可以为用户提供添加 GMP&#x2F;NTL&#x2F;tcmalloc（线程敏感内存分配）第三方库的选项。</p>
<h1 id="PALISADE-库的安装与构建"><a href="#PALISADE-库的安装与构建" class="headerlink" title="PALISADE 库的安装与构建"></a>PALISADE 库的安装与构建</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhigang-chen.github.io/Palisade/">PALISADE-中文维基百科</a><br><a href="https://blog.csdn.net/qq_41996851/article/details/109625434">格密码开源库 PALISADE 的使用-CSDN</a><br><a href="https://blog.csdn.net/qq_45785407/category_11384169.html">PALISADE 全同态加密开源库-CSDN</a></p>
]]></content>
      <categories>
        <category>Homomorphic Encryption</category>
      </categories>
      <tags>
        <tag>Open Source Library</tag>
      </tags>
  </entry>
  <entry>
    <title>SEAL</title>
    <url>/2023/12/30/SEAL/</url>
    <content><![CDATA[<h1 id="SEAL-库介绍"><a href="#SEAL-库介绍" class="headerlink" title="SEAL 库介绍"></a>SEAL 库介绍</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Simple Encrypted Arithmetic Library（简单加密算术库）或 SEAL 是一个免费和开源的跨平台软件库，由微软研究院开发，实现各种形式的同态加密。</p>
<span id="more"></span>

<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>开发最初出自 Cryptonets 论文，证明了人工智能算法可以在同态加密的数据上运行。它是开源的（根据 MIT 许可证） ，并且是用标准 C++ 编写的，没有外部依赖关系，因此它可以跨平台编译。使用 C# 编写的官方 .NET 包装器是可用的，它使 .NET 应用程序更容易与 SEAL 交互。</p>
<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>Microsoft SEAL 同时支持非对称和对称（在 3.4 版中添加）加密算法。</p>
<h3 id="方案类型"><a href="#方案类型" class="headerlink" title="方案类型"></a>方案类型</h3><p>Microsoft SEAL 提供了两种不同的同态加密方案，它们有着非常不同的属性:</p>
<p>BFV: BFV 方案允许对加密的整数执行同余关系。对于需要精确数值的应用，BFV 方案是唯一的选择。</p>
<p>CKKS: CKKS 方案允许对加密的实数或复数进行加法和乘法，但只能得到近似的结果。在诸如总结加密实数、评估加密数据的机器学习模型或计算加密位置的距离等应用中，CKKS 将是目前为止的最佳选择。</p>
<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>数据压缩可以通过在 Zlib 的支持下构建 SEAL 来实现。默认情况下，数据使用 DEFLATE 算法进行压缩，这种算法在序列化对象如加密参数、密文、明文和所有可用的密钥: Public、 Secret、 Relin（重线性化）和 Galois 时节省了大量的内存占用。总是可以禁用压缩。</p>
<h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p><a href="https://github.com/Microsoft/SEAL">Microsoft SEAL</a></p>
<h3 id="C-F"><a href="#C-F" class="headerlink" title="C#&#x2F;F#"></a>C#&#x2F;F#</h3><p><a href="https://www.nuget.org/packages/Microsoft.Research.SEALNet/">NuGet</a></p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><a href="https://github.com/Lab41/PySEAL">PySEAL</a></p>
<p><a href="https://github.com/Huelse/SEAL-Python">SEAL-Python</a></p>
<p><a href="https://github.com/tf-encrypted/tf-seal">tf-seal</a></p>
<p><a href="https://github.com/ibarrond/Pyfhel">Pyfhel</a></p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><a href="https://github.com/morfix-io/node-seal">node-seal</a></p>
<p><a href="https://github.com/PrivateSky/sealjs">sealjs</a></p>
<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p><a href="https://github.com/morfix-io/node-seal">node-seal</a></p>
<h1 id="Microsoft-SEAL"><a href="#Microsoft-SEAL" class="headerlink" title="Microsoft SEAL"></a>Microsoft SEAL</h1><p>SEAL 的 Github 主页在 : <a href="https://github.com/microsoft/SEAL">https://github.com/microsoft/SEAL</a> 。</p>
<p>以下翻译自 <a href="https://github.com/microsoft/SEAL/blob/main/README.md">README.md</a> :</p>
<h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>大多数加密方案都包含三个功能：密钥生成、加密和解密。对称密钥加密方案在加密和解密时使用相同的秘钥；公用密钥加密方案在加密和解密时分别使用公用密钥和秘钥。因此，公用密钥加密方案允许任何知道公用密钥的人加密数据，但只有知道秘密密钥的人才能解密和读取数据。对称密钥加密可用于高效加密大量数据，并实现安全的外包云端存储。公钥加密是实现当今安全在线通信的一个基本概念，但其效率通常比对称密钥加密低得多。</p>
<p>虽然传统的对称密钥和公钥加密可用于安全存储和通信，但任何外包计算都必然要求在进行计算之前移除加密层。因此，提供外包计算功能的云服务必须能够访问密匙，并实施访问策略，防止未经授权的员工访问这些密匙。</p>
<h3 id="同态加密"><a href="#同态加密" class="headerlink" title="同态加密"></a>同态加密</h3><p>同态加密是指允许云直接对加密数据进行计算，而无需先对数据进行解密的加密方案。这种加密计算的结果仍然是加密的，只有（数据所有者）使用秘钥才能解密。在过去的十年里，人们发明了多种具有不同功能和权衡的同态加密方案；其中大多数是公钥加密方案，尽管可能并不总是需要公钥功能。</p>
<p>同态加密不是一种通用技术：只能对加密数据进行某些计算。同态加密技术也会带来巨大的性能开销，因此，在未加密数据上执行成本已经非常高昂的计算，在加密数据上很可能是不可行的。此外，使用同态加密技术加密的数据比未加密数据大很多倍，因此使用这种技术加密整个大型数据库等可能没有意义。相反，有意义的用例是在严格的隐私要求完全禁止未加密的云计算，但计算本身相当轻量级的情况下。</p>
<p>通常情况下，同态加密方案只有一个密钥，由数据所有者持有。对于多个不同的私有数据所有者希望参与协作计算的场景，同态加密可能不是一个合理的解决方案。</p>
<p>同态加密不能用来让数据科学家规避 GDPR。例如，云服务无法使用同态加密从加密的客户数据中获取见解。相反，加密计算的结果仍然是加密的，只有数据所有者（如云服务客户）才能解密。</p>
<p>与传统加密方案相比，大多数同态加密方案提供的安全保证较弱。如果您打算使用 Microsoft SEAL 构建生产软件，请阅读 <a href="https://github.com/microsoft/SEAL/blob/main/SECURITY.md">SECURITY.md</a>。</p>
<h3 id="微软-SEAL"><a href="#微软-SEAL" class="headerlink" title="微软 SEAL"></a>微软 SEAL</h3><p>Microsoft SEAL 是一个同态加密库，可对加密整数或实数进行加法和乘法运算。其他操作，如加密比较、排序或正则表达式，在大多数情况下无法使用该技术对加密数据进行评估。因此，只有程序的特定隐私关键云计算部分才应使用 Microsoft SEAL 实现。</p>
<p>将未加密计算转化为加密数据上的计算并不总是那么容易或直接，例如，无法在加密数据上进行分支计算。微软 SEAL 本身的学习曲线很陡峭，需要用户理解许多同态加密的特定概念，尽管最终的应用程序接口并不复杂。即使用户能够使用 Microsoft SEAL 编程并运行特定计算，高效和低效实现之间的差别也可能是几个数量级，新用户很难知道如何提高计算性能。</p>
<p>Microsoft SEAL 附带两种不同的同态加密方案，它们的特性截然不同。BFV 和 BGV 方案允许对加密整数进行模块运算。CKKS 方案允许对加密的实数或复数进行加法和乘法运算，但只能得到近似结果。在对加密实数求和、评估加密数据上的机器学习模型或计算加密位置的距离等应用中，CKKS 是迄今为止最好的选择。对于需要精确值的应用，BFV 和 BGV 方案更为合适。</p>
<h2 id="准备开始"><a href="#准备开始" class="headerlink" title="准备开始"></a>准备开始</h2><p>安装 MicrosoftSEAL 并开始使用它有多种方法。最简单的方法是使用包管理器下载、构建和安装库。例如，vcpkg 可以在大多数平台上工作，并且将与 Microsoft SEAL 的最新版本(仅限 C++ 17)保持同步。在 macOS 上你也可以使用 Homebrew。在 FreeBSD 上，你可以使用 pkg 安装密封来安装安全&#x2F;密封。那个。NET 库以多平台 NuGet 包的形式提供。最后，可以使用多平台 CMake 构建系统手动构建 MicrosoftSEAL; 有关详细信息，请参阅构建 MicrosoftSEAL 手动。</p>
<h3 id="可选择的依赖项"><a href="#可选择的依赖项" class="headerlink" title="可选择的依赖项"></a>可选择的依赖项</h3><p>MicrosoftSEAL 没有必要的依赖项，但是在编译时支持特定的第三方库时可以启用某些可选特性。</p>
<p>在手动构建时，可以选择让 Microsoft SEAL 构建系统下载并构建依赖项，或者在系统目录中搜索预安装的依赖项。在另一个极端，可下载的 NuGet 包根本无法配置，但是总是可以构建定制的 NuGet 包。其他包管理器为配置依赖项和其他构建选项提供了不同数量的机会。</p>
<p>可选的依赖项及其测试版本（其他版本也可以）如下:</p>
<table>
<thead>
<tr>
<th>Optional dependency</th>
<th>Tested version</th>
<th>Use</th>
</tr>
</thead>
<tbody><tr>
<td>Intel HEXL</td>
<td>1.2.5</td>
<td>Acceleration of low-level kernels</td>
</tr>
<tr>
<td>Microsoft GSL</td>
<td>4.0.0</td>
<td>API extensions</td>
</tr>
<tr>
<td>ZLIB</td>
<td>1.2.13</td>
<td>Compressed serialization</td>
</tr>
<tr>
<td>Zstandard</td>
<td>1.5.2</td>
<td>Compressed serialization (much faster than ZLIB)</td>
</tr>
<tr>
<td>GoogleTest</td>
<td>1.12.1</td>
<td>For running tests</td>
</tr>
<tr>
<td>GoogleBenchmark</td>
<td>1.7.1</td>
<td>For running benchmarks</td>
</tr>
</tbody></table>
<h4 id="Intel-HEXL"><a href="#Intel-HEXL" class="headerlink" title="Intel HEXL"></a>Intel HEXL</h4><p>Intel HEXL 是一个库，可高效实现同态加密中常见的加密原语。在使用英特尔 AVX512-IFMA52 指令集的英特尔处理器上，加速效果尤为明显。</p>
<h4 id="Microsoft-GSL"><a href="#Microsoft-GSL" class="headerlink" title="Microsoft GSL"></a>Microsoft GSL</h4><p>Microsoft GSL（Guidelines Support Library，指南支持库）是一个仅头文件的库，它实现了 gsl::span：一种视图类型，可提供对内存的安全（边界校验）数组访问。</p>
<p>例如，如果 Microsoft GSL 可用，Microsoft SEAL 就可以允许 BatchEncoder 和 CKKSEncoder 从 gsl::span 编码并解码到 gsl::span，而不是 std::vector，这在某些情况下会带来显著的性能优势。</p>
<h4 id="ZLIB-和-Zstandard"><a href="#ZLIB-和-Zstandard" class="headerlink" title="ZLIB 和 Zstandard"></a>ZLIB 和 Zstandard</h4><p>ZLIB 和 Zstandard 是广泛使用的压缩库。Microsoft SEAL 可以选择使用这些库来压缩序列化数据。</p>
<p>有人可能会问，既然密文和密钥数据应该与随机数据无异，压缩又有什么用呢？在 Microsoft SEAL 中，密码文本对象由大量整数和特定素数（coeff_modulus primes）组成。特别是在使用 CKKS 方案时，这些质数可能非常小（例如 30 位），但数据仍被序列化为 64 位整数。因此，几乎一半的密码文本字节都是零的情况并不少见，而应用通用压缩算法是消除这些浪费空间的便捷方法。BFV 方案从这种技术中受益较少，因为用于 coeff_modulus 加密参数的质数往往较大，而与这些质数相乘的整数占每个 64 位字的更多空间。压缩序列化可应用于任何可序列化的 Microsoft SEAL 对象，而不仅仅是密文和密钥。</p>
<p>如果 Microsoft SEAL 在编译时支持 ZLIB 或 Zstandard，则会自动在序列化过程中使用压缩；请参见 native&#x2F;src&#x2F;seal&#x2F;serialization.h 中的 Serialization::comp_mode_default。如果同时启用了 ZLIB 和 Zstandard 支持，则默认使用 Zstandard，因为其性能要好得多。</p>
<p>注意：密钥的压缩率（至少在理论上）可以揭示密钥的相关信息。在 Microsoft SEAL 的大多数常见应用中，密钥的大小不会故意透露给不受信任的各方。如果有这方面的顾虑，可以随时以未压缩的形式保存密钥。</p>
<h3 id="从-NuGet-软件包安装"><a href="#从-NuGet-软件包安装" class="headerlink" title="从 NuGet 软件包安装"></a>从 NuGet 软件包安装</h3><blockquote>
<p>Windows、Linux、macOS、Android、iOS</p>
</blockquote>
<p>对于 .NET 开发人员来说，安装 Microsoft SEAL 的最简单方法是使用 NuGet.org 上的多平台 NuGet 软件包。只需将此软件包作为依赖项添加到您的 .NET 项目中，就可以开始使用了。</p>
<p>要使用 Microsoft SEAL 和 .NET 开发 Android 和 iOS 移动应用程序，只需将此软件包添加到 Xamarin 项目中即可。与 Microsoft SEAL C++ 库不同，.NET 封装库仅适用于 64 位平台，因此仅支持 arm64-v8a&#x2F;x86_64 Android ABI 和 arm64&#x2F;x86_64 iOS 体系结构。</p>
<h3 id="从-vcpkg-安装"><a href="#从-vcpkg-安装" class="headerlink" title="从 vcpkg 安装"></a>从 vcpkg 安装</h3><p>你可以使用 vcpkg 依赖关系管理器下载并安装 seal。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Microsoft/vcpkg.git</span><br><span class="line">cd vcpkg</span><br><span class="line">./bootstrap-vcpkg.sh # ./bootstrap-vcpkg.bat for Windows</span><br><span class="line">./vcpkg integrate install</span><br><span class="line">./vcpkg install seal</span><br></pre></td></tr></table></figure>

<p>vcpkg 中的 “seal “端口由微软团队成员和社区贡献者保持更新。如果版本过时，请在 vcpkg 代码库中创建问题或拉动请求。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>使用 Microsoft SEAL 需要用户投入一些时间学习同态加密的基本概念。代码附带了大量注释示例，旨在逐步教授这些概念，并演示 API 的大部分内容。这些示例有 C++ 和 C# 版本（且完全相同），并分为多个源文件，分别位于 <code>native/examples/</code> (C++) 和 <code>dotnet/examples/</code> (C#)，具体如下：</p>
<table>
<thead>
<tr>
<th>C++</th>
<th>C#</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>examples.cpp</td>
<td>Examples.cs</td>
<td>运行程序示例</td>
</tr>
<tr>
<td>1_bfv_basics.cpp</td>
<td>1_BFV_Basics.cs</td>
<td>使用 BFV 方案进行加密模块运算</td>
</tr>
<tr>
<td>2_encoders.cpp</td>
<td>2_Encoders.cs</td>
<td>将更复杂的数据编码为 Microsoft SEAL 明文对象</td>
</tr>
<tr>
<td>3_levels.cpp</td>
<td>3_Levels.cs</td>
<td>介绍级别概念；使用 CKKS 方案的前提条件</td>
</tr>
<tr>
<td>4_bgv_basics.cpp</td>
<td>4_BGV_Basics.cs</td>
<td>使用 BGV 方案进行加密模块运算</td>
</tr>
<tr>
<td>5_ckks_basics.cpp</td>
<td>5_CKKS_Basics.cs</td>
<td>使用 CKKS 方案进行加密实数运算</td>
</tr>
<tr>
<td>6_rotation.cpp</td>
<td>6_Rotation.cs</td>
<td>在 BFV 和 CKKS 方案中对加密向量进行循环旋转</td>
</tr>
<tr>
<td>7_serialization.cpp</td>
<td>7_Serialization.cs</td>
<td>在 Microsoft SEAL 中序列化对象</td>
</tr>
<tr>
<td>8_performance.cpp</td>
<td>8_Performance.cs</td>
<td>性能测试</td>
</tr>
</tbody></table>
<p>建议在运行示例时阅读注释和代码片段以及命令行打印输出。为便于导航，命令行打印输出提供了相关源文件中代码片段开始的行号。要构建示例，请参阅示例、测试和基准（C++）和构建 .NET 组件（C#）。</p>
<p>注意：如果不学习示例 1-6，就不可能知道如何正确使用 Microsoft SEAL。这些示例旨在为读者提供有关同态加密的必要概念背景。直接重复使用示例中的代码效果不会很好，因为示例通常演示的是单个功能，而且没有对性能进行优化。如果不深入研究示例就编写 Microsoft SEAL 代码，势必会导致代码易受攻击、无法正常运行或运行速度极慢。</p>
<h3 id="使用-EVA-进行-CKKS-编程"><a href="#使用-EVA-进行-CKKS-编程" class="headerlink" title="使用 EVA 进行 CKKS 编程"></a>使用 EVA 进行 CKKS 编程</h3><p>通过学习上述示例，我们可以清楚地看到，CKKS 方案对初学者并不友好。即使是相对简单的计算，也会因为重缩放操作的限制和不同级别缩放对齐的要求而难以进行。</p>
<p>我们创建了一个名为 EVA 的新编译工具，在很大程度上帮助解决了这些难题。EVA 允许程序员用 Python 表达所需的加密计算。它为 Microsoft SEAL 优化计算，选择适当的加密参数，并提供方便的 Python API，用于加密输入、执行计算和解密结果。EVA 位于 GitHub.com&#x2F;Microsoft&#x2F;EVA。请试用一下，并告诉我们您的想法！</p>
<p>注意：EVA 仅支持 CKKS 方案。目前还没有支持 BFV 或 BGV 方案的计划。</p>
<h2 id="手动构建-Microsoft-SEAL"><a href="#手动构建-Microsoft-SEAL" class="headerlink" title="手动构建 Microsoft SEAL"></a>手动构建 Microsoft SEAL</h2><h3 id="构建-C-组件"><a href="#构建-C-组件" class="headerlink" title="构建 C++ 组件"></a>构建 C++ 组件</h3><p>在所有平台上，Microsoft SEAL 都使用 CMake 构建。我们建议使用源外编译，尽管源内编译也可以。下面我们将说明如何在全局（整个系统）或本地（单个用户）配置、构建和安装 Microsoft SEAL。全局安装需要提升（root 或管理员）权限。</p>
<h4 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h4><table>
<thead>
<tr>
<th>System</th>
<th>Toolchain</th>
</tr>
</thead>
<tbody><tr>
<td>Windows</td>
<td>Visual Studio 2022 with C++ CMake Tools for Windows</td>
</tr>
<tr>
<td>Linux</td>
<td>Clang++ (&gt;&#x3D; 5.0) or GNU G++ (&gt;&#x3D; 6.0), CMake (&gt;&#x3D; 3.13)</td>
</tr>
<tr>
<td>macOS&#x2F;iOS</td>
<td>Xcode toolchain (&gt;&#x3D; 9.3), CMake (&gt;&#x3D; 3.13)</td>
</tr>
<tr>
<td>Android</td>
<td>Android Studio</td>
</tr>
<tr>
<td>FreeBSD</td>
<td>CMake (&gt;&#x3D; 3.13)</td>
</tr>
</tbody></table>
<p>注意：使用 Clang++ 编译的 Microsoft SEAL 比使用 GNU G++ 编译的运行时性能要好得多。</p>
<h4 id="构建-Microsoft-SEAL"><a href="#构建-Microsoft-SEAL" class="headerlink" title="构建 Microsoft SEAL"></a>构建 Microsoft SEAL</h4><p>我们假定 Microsoft SEAL 已克隆到一个名为 SEAL 的目录中，并假定在 SEAL 目录中执行以下所有命令。</p>
<p>您可以通过执行以下命令为您的计算机构建 Microsoft SEAL 库（源码外）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake -S . -B build</span><br><span class="line">cmake --build build</span><br></pre></td></tr></table></figure>

<p>编译完成后，可在 build&#x2F;lib&#x2F; 和 build&#x2F;bin&#x2F; 目录中找到输出二进制文件。</p>
<p>可以指定各种配置选项并将其传递给 CMake 编译系统。这些选项将在下文的 CMake 基本选项和 CMake 高级选项部分进行介绍。</p>
<h4 id="安装-Microsoft-SEAL"><a href="#安装-Microsoft-SEAL" class="headerlink" title="安装 Microsoft SEAL"></a>安装 Microsoft SEAL</h4><p>如果您拥有系统的 root 访问权限，您可以按如下方法全局安装 Microsoft SEAL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake -S . -B build</span><br><span class="line">cmake --build build</span><br><span class="line">sudo cmake --install build</span><br></pre></td></tr></table></figure>

<p>要在本地安装 Microsoft SEAL，例如安装到 ~&#x2F;mylibs&#x2F;，请执行以下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake -S . -B build -DCMAKE_INSTALL_PREFIX=~/mylibs</span><br><span class="line">cmake --build build</span><br><span class="line">sudo cmake --install build</span><br></pre></td></tr></table></figure>

<h4 id="在-Windows-上编译和安装"><a href="#在-Windows-上编译和安装" class="headerlink" title="在 Windows 上编译和安装"></a>在 Windows 上编译和安装</h4><p>在 Windows 系统中，上述脚本可在 Visual Studio 的开发人员命令提示符下使用 Ninja 或 “Visual Studio 17 2022 “生成器运行。</p>
<p>使用 Ninja 生成器时，请根据要构建的平台使用相应的命令提示符。如果要为 x64 平台构建，请使用 x64 Native Tools Command Prompt for Visual Studio 2022 命令提示符配置和构建库。如果要为 x86 构建库，请使用 x86 Native Tools Command Prompt for Visual Studio 2022 命令提示符配置和构建库。要使用 Ninja 进行编译，请键入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake -S . -B build -G Ninja</span><br><span class="line">cmake --build build</span><br></pre></td></tr></table></figure>

<p>使用 “Visual Studio 17 2022 “生成器时，可以使用开发人员命令提示符（Developer Command Prompt for VS 2022）命令提示符来配置和构建库。默认情况下，生成的平台为 x64。你可以使用架构标志 <code>-A &lt;x64|Win32&gt;</code> 指定所需的平台，并使用 <code>--config &lt;Debug|Release&gt;</code> 指定所需的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在 Release 模式下生成并构建 x64 版本</span><br><span class="line">cmake -S . -B build -G &quot;Visual Studio 17 2022&quot; -A x64</span><br><span class="line">cmake --build build --config Release</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在 Release 模式下生成并构建 x86 版本</span><br><span class="line">cmake -S . -B build -G &quot;Visual Studio 17 2022&quot; -A Win32</span><br><span class="line">cmake --build build --config Release</span><br></pre></td></tr></table></figure>

<p>在 Windows 中安装库也同样有效。不过，你不能使用 <code>sudo</code> 命令，而需要在具有管理员权限的命令提示符下运行 <code>cmake --install build</code>。默认情况下，文件将被安装到 <code>C:/Program Files (x86)/SEAL\</code>。</p>
<p>Visual Studio 2022 支持基于 CMake 的项目。你可以选择菜单选项 <code>File/Open/Folder...</code>（文件&#x2F;打开&#x2F;文件夹…），然后导航然后导航到 Microsoft SEAL 资源库所在的文件夹。打开文件夹后，Visual Studio 将检测到这是一个基于 CMake 的项目，并启用菜单命令 <code>Project/CMake settings for SEAL</code>。这将打开 CMake 设置编辑器，它提供了一个用户界面，可以创建不同的配置和设置不同的 CMake 选项。</p>
<p>构建完成后，可在 <code>build\lib\</code> 或 <code>build\lib\Release\</code> 中找到输出静态库 <code>seal-&lt;version&gt;.lib</code>。在与应用程序链接时，强烈建议使用 CMake，正如在《通过 CMake 与 Microsoft SEAL 链接》中所解释的那样。或者，你需要添加 <code>native\src\</code> （完整路径）和 <code>build\native\src\</code> 作为包含目录，以找到 Microsoft SEAL 头文件。</p>
<h4 id="为-Android-和-iOS-构建"><a href="#为-Android-和-iOS-构建" class="headerlink" title="为 Android 和 iOS 构建"></a>为 Android 和 iOS 构建</h4><p>Microsoft SEAL 可针对 Android 和 iOS 进行编译。在源代码树的 android&#x2F; 目录下，你可以找到一个 Android Studio 项目，用来编译 Android 版库。</p>
<p>要编译 iOS 版库，请使用以下脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置 CMake</span><br><span class="line">cmake -S . -B build -GXcode -DSEAL_BUILD_SEAL_C=ON -DSEAL_BUILD_STATIC_SEAL_C=ON -DCMAKE_SYSTEM_NAME=iOS &quot;-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64&quot; -C cmake/memset_s.iOS.cmake</span><br><span class="line"></span><br><span class="line"># 为 x86_64 构建 libseal*.a</span><br><span class="line">xcodebuild -project build/SEAL.xcodeproj -sdk iphonesimulator -arch x86_64 -configuration Release clean build</span><br><span class="line">mkdir -p build/lib/x86_64</span><br><span class="line">cp build/lib/Release/libseal*.a build/lib/x86_64</span><br><span class="line"></span><br><span class="line"># 为 arm64 构建 libseal*.a</span><br><span class="line">xcodebuild -project SEAL.xcodeproj -sdk iphoneos -arch arm64 -configuration Release clean build</span><br><span class="line">mkdir -p build/lib/arm64</span><br><span class="line">cp build/lib/Release/libseal*.a build/lib/arm64</span><br><span class="line"></span><br><span class="line"># 将 libseal-*.a 合并为 libseal.a，将 libsealc-*.a 合并为 libsealc.a</span><br><span class="line">lipo -create -output build/lib/libseal.a build/lib/x86_64/libseal-*.a arm64/libseal-*.a</span><br><span class="line">lipo -create -output build/lib/libsealc.a build/lib/x86_64/libsealc-*.a build/lib/arm64/libsealc-*.a</span><br></pre></td></tr></table></figure>

<p>通过这些方法生成的本地库只能通过以下章节中描述的 .NET 库调用。具体来说，它们不包含任何可用于 Java（Android）或 Objective C（iOS）的封装器。</p>
<h4 id="为-WebAssembly-构建"><a href="#为-WebAssembly-构建" class="headerlink" title="为 WebAssembly 构建"></a>为 WebAssembly 构建</h4><p>Microsoft SEAL 可在 Windows、Linux 和 macOS 上使用 emscripten 编译 JavaScript 和 WebAssembly。为 Web 构建意味着 SEAL 可在任何客户端&#x2F;服务器环境中运行，如所有主流浏览器（如 Edge、Chrome、Firefox、Safari）和 NodeJS。</p>
<p>为 WebAssembly 构建需要安装 emscripten 工具链。配置该工具链的最简单方法是克隆 emsdk，然后按照说明操作（附带针对特定系统的注释）。例如，在 Linux 和 macOS 上，在 emsdk repo 中运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装最新的工具链</span><br><span class="line">./emsdk install latest</span><br><span class="line">./emsdk activate latest</span><br><span class="line"># 获取环境源代码</span><br><span class="line">source ./emsdk_env.sh</span><br></pre></td></tr></table></figure>

<p>在 Windows 环境下，最好在 Visual Studio 的开发人员命令提示符下运行；并将 <code>./emsdk</code> 和 <code>source ./emsdk_env.sh</code> 分别替换为 <code>emsdk</code> 和 <code>emsdk_env.bat</code>。在其他环境下，必须在路径中添加 <code>cmake</code>，并在下面的配置步骤中指定 “Ninja “或 “MinGW Makefiles “作为生成器。</p>
<p>在同一 shell 中，导航到 Microsoft SEAL 的根目录，运行以下命令来构建 WebAssembly：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置 CMake。发布版构建的示例标志</span><br><span class="line">emcmake cmake -S . -B build \</span><br><span class="line"> -dbuild_shared_libs=off \</span><br><span class="line"> -DCMAKE_BUILD_TYPE=Release \</span><br><span class="line"> -DCMAKE_CXX_FLAGS_RELEASE=&quot;-DNDEBUG -flto -O3&quot;\</span><br><span class="line"> -DCMAKE_C_FLAGS_RELEASE=&quot;-DNDEBUG -flto -O3&quot; \</span><br><span class="line"> -DSEAL_BUILD_BENCH=OFF \ # 可以为 WASM 构建基准。将其更改为 ON。</span><br><span class="line"> -dseal_build_examples=off （关闭</span><br><span class="line"> -dseal_build_tests=off （关闭</span><br><span class="line"> -dseal_use_cxx17=ON （关闭</span><br><span class="line"> -dseal_use_intrin=on （关闭</span><br><span class="line"> -dseal_use_msgsl=off （关闭</span><br><span class="line"> -dseal_use_zlib=on （关闭</span><br><span class="line"> # Make static library (shared).</span><br><span class="line"></span><br><span class="line"># 制作静态库（emscripten 不支持共享库）</span><br><span class="line">emmake make -C build -j</span><br><span class="line"></span><br><span class="line"># 构建 WebAssembly 模块</span><br><span class="line">emcc</span><br><span class="line"> -Wall \</span><br><span class="line"> -flto \</span><br><span class="line"> -O3 \</span><br><span class="line"> build/lib/libseal-4.1.a\</span><br><span class="line"> -bind（绑定</span><br><span class="line"> -o &quot;build/bin/seal_wasm.js&quot;\</span><br><span class="line"> -s WASM=1</span><br><span class="line"> -s ALLOW_MEMORY_GROWTH=1</span><br></pre></td></tr></table></figure>

<p>注意：在构建 WebAssembly 模块时，有许多标志需要考虑。有关高级构建标志，请参阅 settings.js 文件。</p>
<p>构建将在 build&#x2F;bin&#x2F; 目录下生成两个输出文件：<code>seal_wasm.js</code> 和 <code>seal_wasm.wasm</code>。工件的文件大小非常小。这是因为优化标志执行了死代码消除（DCE），因为没有生成与 JavaScript 的绑定。要从 JavaScript 域调用 WebAssembly，就必须定义这些绑定；不过，Microsoft SEAL 目前不包含任何定义。构建标记 <code>--bind</code> 希望使用 embind 语法指定绑定。</p>
<h4 id="CMake-基本选项"><a href="#CMake-基本选项" class="headerlink" title="CMake 基本选项"></a>CMake 基本选项</h4><p>以下选项可用于 CMake 配置联编。每个选项的默认值在 “值 “一栏中以粗体表示。</p>
<table>
<thead>
<tr>
<th>CMake option</th>
<th>Values</th>
<th>Information</th>
</tr>
</thead>
<tbody><tr>
<td>CMAKE_BUILD_TYPE</td>
<td>Release Debug RelWithDebInfo MinSizeRel</td>
<td><code>Debug</code> 和 <code>MinSizeRel</code> 的运行时性能更差。调试会插入额外的断言代码。除非您正在开发 Microsoft SEAL 本身或调试某些复杂问题，否则请设置为 <code>Release</code>。</td>
</tr>
<tr>
<td>SEAL_BUILD_EXAMPLES</td>
<td>ON &#x2F; OFF</td>
<td>在 <code>native/examples</code> 中构建 C++ 示例。</td>
</tr>
<tr>
<td>SEAL_BUILD_TESTS</td>
<td>ON &#x2F; OFF</td>
<td>编译测试以检查 Microsoft SEAL 是否正常工作。</td>
</tr>
<tr>
<td>SEAL_BUILD_BENCH</td>
<td>ON &#x2F; OFF</td>
<td>构建性能基准。</td>
</tr>
<tr>
<td>SEAL_BUILD_DEPS</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 可自动下载并联编可选的依赖项；否则 CMake 将尝试查找预安装的依赖项。</td>
</tr>
<tr>
<td>SEAL_USE_INTEL_HEXL</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 可为低级内核使用 Intel HEXL。</td>
</tr>
<tr>
<td>SEAL_USE_MSGSL</td>
<td>ON &#x2F; OFF</td>
<td>使用 Microsoft GSL 支持进行联编。</td>
</tr>
<tr>
<td>SEAL_USE_ZLIB</td>
<td>ON &#x2F; OFF</td>
<td>支持 ZLIB。</td>
</tr>
<tr>
<td>SEAL_USE_ZSTD</td>
<td>ON &#x2F; OFF</td>
<td>支持 Zstandard。</td>
</tr>
<tr>
<td>BUILD_SHARED_LIBS</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 可构建共享库，而非静态库。Windows 中不支持。</td>
</tr>
<tr>
<td>SEAL_BUILD_SEAL_C</td>
<td>ON &#x2F; OFF</td>
<td>构建 C 封装库 SEAL_C。它被 C# 封装程序使用，大多数用户没有理由构建它。</td>
</tr>
<tr>
<td>SEAL_USE_CXX17</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 可将 Microsoft SEAL 作为 C++17 生成，从而对性能产生积极影响。</td>
</tr>
<tr>
<td>SEAL_USE_INTRIN</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 可使用编译器本征以提高性能。CMake 会自动检测可用的内在函数，并相应地启用它们。</td>
</tr>
</tbody></table>
<p>像往常一样，这些选项可以通过 <code>-D</code> 标志传递给 CMake。例如，可以运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake -S . -B build -DSEAL_BUILD_EXAMPLES=ON</span><br></pre></td></tr></table></figure>

<p>来配置 Microsoft SEAL 静态库的发布版构建，并同时构建示例。</p>
<h4 id="CMake-高级选项"><a href="#CMake-高级选项" class="headerlink" title="CMake 高级选项"></a>CMake 高级选项</h4><p>以下选项可用于 CMake 以进一步配置联编。大多数用户无需更改这些选项，这也是它们被标记为高级选项的原因。</p>
<table>
<thead>
<tr>
<th>CMake option</th>
<th>Values</th>
<th>Information</th>
</tr>
</thead>
<tbody><tr>
<td>SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 以在 Microsoft SEAL 生成没有密钥相关组件的加密文本时引发异常。例如，从本身减去加密文本，或者用明文零乘以加密文本，得到的加密文本等于零，这些加密文本不应被视为有效的加密文本。</td>
</tr>
<tr>
<td>SEAL_BUILD_STATIC_SEAL_C</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 以将 SEAL_C 构建为静态库而不是共享库。</td>
</tr>
<tr>
<td>SEAL_DEFAULT_PRNG</td>
<td>Blake2xb Shake256</td>
<td>MicrosoftSEAL 支持 Blake2xb 和 Shake256XOF 生成随机字节。Blake2xb 要快得多，但它并不标准化，而 Shake256是 FIPS 标准。</td>
</tr>
<tr>
<td>SEAL_USE_GAUSSIAN_NOISE</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 可以使用非常数时间圆形的连续高斯分布来表示误差分布，否则使用中心二项分布(标准差略大)。</td>
</tr>
<tr>
<td>SEAL_AVOID_BRANCHING</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 可以在编译器恶意插入标志时消除关键函数中的分支; 否则假设使用 <code>cmov</code>。</td>
</tr>
<tr>
<td>SEAL_SECURE_COMPILE_OPTIONS</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 以编译&#x2F;链接 Control-Flow Guard (<code>/guard:cf</code>)和 Spectre 修正(<code>/Qspece</code>)。这只有在用 MSVC 编译时才有效果。</td>
</tr>
<tr>
<td>SEAL_USE_ALIGNED_ALLOC</td>
<td>ON &#x2F; OFF</td>
<td>设置为 <code>ON</code> 以使用64字节对齐的内存分配。这可以提高性能的 AVX512原语时，英特尔 HEXL 启用。这取决于 C++ 17，在 Android 上是禁用的。</td>
</tr>
</tbody></table>
<h4 id="通过-CMake-链接-Microsoft-SEAL"><a href="#通过-CMake-链接-Microsoft-SEAL" class="headerlink" title="通过 CMake 链接 Microsoft SEAL"></a>通过 CMake 链接 Microsoft SEAL</h4><p>如果使用 CMake，将自己的应用程序和库与 Microsoft SEAL 进行链接非常简单。只需在 <code>CMakeLists.txt </code>中添加以下内容即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find_package(SEAL 4.1 REQUIRED)</span><br><span class="line">target_link_libraries(&lt;your target&gt; SEAL::seal)</span><br></pre></td></tr></table></figure>

<p>如果 Microsoft SEAL 已全局安装，上述 find_package 命令很可能会自动找到该库。如果要与安装在本地的 Microsoft SEAL 进行链接，例如如上所述安装在 ~&#x2F;mylibs 中，则可能需要在配置应用程序时告诉 CMake 在何处查找 Microsoft SEAL，方法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &lt;包含 CMakeLists.txt 的目录&gt;</span><br><span class="line">cmake . -DCMAKE_PREFIX_PATH=~/mylibs</span><br></pre></td></tr></table></figure>
<p>如果 Microsoft SEAL 是使用 vcpkg 或 Homebrew 等软件包管理器安装的，请参阅它们的文档了解如何与已安装的库链接。例如，vcpkg 要求您在配置项目时指定 vcpkg CMake 工具链文件。</p>
<h4 id="示例、测试和基准测试"><a href="#示例、测试和基准测试" class="headerlink" title="示例、测试和基准测试"></a>示例、测试和基准测试</h4><p>在构建 Microsoft SEAL 时，可以通过设置 <code>SEAL_BUILD_EXAMPLES=ON</code>、<code>SEAL_BUILD_TESTS=ON</code> 和 <code>SEAL_BUILD_BENCH=ON</code> 来构建示例、测试和基准；请参阅 CMake 基本选项。另外，也可以通过以下命令，将示例、测试和基准作为与 Microsoft SEAL（安装在 <code>~/mylibs</code>）链接的独立 CMake 项目来构建。如果该库是全局安装的，则省略 <code>SEAL_ROOT</code> 设置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd native/&lt;examples|tests|bench&gt;</span><br><span class="line">cmake -S . -B build -DSEAL_ROOT=~/mylibs</span><br><span class="line">cmake --build build</span><br></pre></td></tr></table></figure>

<p>默认情况下，基准会针对参数和基元向量运行，这可能会提供大量信息。要执行基准案例子集，请参阅 Google 基准 README。对于高级用户，可以使用自定义参数集覆盖 native&#x2F;bench&#x2F;bench.cpp 中的 <code>bm_parms_vec</code> 变量。</p>
<p>注意：基准代码严格用于实验目的；它允许不安全的参数，不得在实际应用中使用。请勿将基准作为示例。</p>
<h3 id="构建-NET-组件"><a href="#构建-NET-组件" class="headerlink" title="构建 .NET 组件"></a>构建 .NET 组件</h3><p>Microsoft SEAL 提供了一个 .NET 标准库，该库封装了 Microsoft SEAL 中的功能，可用于 .NET 开发。除非打算开发 Microsoft SEAL 或构建自定义 NuGet 包，否则强烈建议使用现有的 NuGet 包。在构建 .NET 组件之前，必须在构建 C++ 组件之后构建 C 封装库 SEAL_C。SEAL_C 库仅供 .NET 库使用，最终用户不得使用。</p>
<p>注意：SEAL_C 和 .NET 库仅支持 64 位平台。</p>
<h4 id="Windows、Linux-和-macOS"><a href="#Windows、Linux-和-macOS" class="headerlink" title="Windows、Linux 和 macOS"></a>Windows、Linux 和 macOS</h4><p>要编译 .NET 代码，您需要安装 .NET SDK（&gt;&#x3D; 6.0）。使用 CMake 构建 SEAL_C 库将生成 .NET 封装库、示例和单元测试的项目文件。在运行 .NET 应用程序时，SEAL_C 库必须可以被发现，例如，必须与可执行文件位于同一目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet build build/dotnet/src --configuration &lt;Debug|Release&gt; # Build .NET wrapper library</span><br><span class="line">dotnet test build/dotnet/tests # Build and run .NET unit tests</span><br><span class="line">dotnet run -p build/dotnet/examples # Build and run .NET examples</span><br></pre></td></tr></table></figure>

<p>你可以使用 <code>--configuration &lt;Debug|Release&gt;</code> 来运行 <code>Debug</code> 或 <code>Release</code> 示例和单元测试。你可以使用 <code>--verbosity detailed</code> 来打印正在运行的单元测试列表。</p>
<p>在 Windows 上，还可以使用 Microsoft Visual Studio 2022 解决方案文件，例如，<code>out/build/x64-Debug/dotnet/SEALNet.sln</code> 来构建所有三个项目。</p>
<h4 id="安卓和-iOS"><a href="#安卓和-iOS" class="headerlink" title="安卓和 iOS"></a>安卓和 iOS</h4><p>虽然可以为 Android 或 iOS 构建自己的自定义 NuGet 包（请参阅 “为 Android 和 iOS 构建本地组件”），但这并不容易，也不推荐使用。相反，请在您的 Xamarin 项目中添加对多平台 NuGet 包的引用。</p>
<h4 id="使用-Microsoft-SEAL-for-NET"><a href="#使用-Microsoft-SEAL-for-NET" class="headerlink" title="使用 Microsoft SEAL for .NET"></a>使用 Microsoft SEAL for .NET</h4><p>要在自己的应用程序中使用 Microsoft SEAL for .NET，您需要</p>
<p>在项目中添加对 <code>SEALNet.dll </code>的引用；<br>确保运行应用程序时本地共享库可用。最简单的方法是将本地共享库复制到应用程序的可执行文件所在目录。</p>
<h4 id="构建自己的-NuGet-软件包"><a href="#构建自己的-NuGet-软件包" class="headerlink" title="构建自己的 NuGet 软件包"></a>构建自己的 NuGet 软件包</h4><p>您可以按照 NUGET.md 中的说明为 Microsoft SEAL 构建自己的 NuGet 软件包。</p>
<h1 id="SEAL-库的安装与构建"><a href="#SEAL-库的安装与构建" class="headerlink" title="SEAL 库的安装与构建"></a>SEAL 库的安装与构建</h1><h2 id="环境条件"><a href="#环境条件" class="headerlink" title="环境条件"></a>环境条件</h2><p>根据参考资料，在 Linux 系统上安装与构建 SEAL 库可能更简单。</p>
<table>
<thead>
<tr>
<th>System</th>
<th>Toolchain</th>
</tr>
</thead>
<tbody><tr>
<td>Linux</td>
<td>Clang++ (&gt;&#x3D; 5.0) or GNU G++ (&gt;&#x3D; 6.0), CMake (&gt;&#x3D; 3.13)</td>
</tr>
</tbody></table>
<p>使用 Clang++ 编译的 Microsoft SEAL 比使用 GNU G++ 编译的运行时性能要好得多。</p>
<h3 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cmake --version                                                            </span><br><span class="line">cmake version 3.27.9</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure>

<h3 id="Clang"><a href="#Clang" class="headerlink" title="Clang++"></a>Clang++</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ clang++ --version</span><br><span class="line">Debian clang version 14.0.6-2</span><br><span class="line">Target: x86_64-pc-linux-gnu</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /usr/bin</span><br></pre></td></tr></table></figure>

<h2 id="安装-SEAL-库"><a href="#安装-SEAL-库" class="headerlink" title="安装 SEAL 库"></a>安装 SEAL 库</h2><h3 id="git-clone-SEAL-库"><a href="#git-clone-SEAL-库" class="headerlink" title="git clone SEAL 库"></a>git clone SEAL 库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents]</span><br><span class="line">└─$ git <span class="built_in">clone</span> https://github.com/microsoft/SEAL</span><br><span class="line">Cloning into <span class="string">&#x27;SEAL&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 17111, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (17111/17111), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (3938/3938), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 17111 (delta 13022), reused 16910 (delta 12959), pack-reused 0</span><br><span class="line">Receiving objects: 100% (17111/17111), 4.92 MiB | 6.70 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (13022/13022), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<h3 id="编译和安装-SEAL-库"><a href="#编译和安装-SEAL-库" class="headerlink" title="编译和安装 SEAL 库"></a>编译和安装 SEAL 库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents]</span><br><span class="line">└─$ <span class="built_in">cd</span> SEAL</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents/SEAL]</span><br><span class="line">└─$ cmake .</span><br><span class="line">-- Build <span class="built_in">type</span> (CMAKE_BUILD_TYPE): Release</span><br><span class="line">-- The CXX compiler identification is GNU 12.2.0</span><br><span class="line">-- The C compiler identification is GNU 12.2.0</span><br><span class="line">...</span><br><span class="line">-- Configuring <span class="keyword">done</span> (20.2s)</span><br><span class="line">-- Generating <span class="keyword">done</span> (0.0s)</span><br><span class="line">-- Build files have been written to: /home/kali/Documents/SEAL</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents/SEAL]</span><br><span class="line">└─$ make</span><br><span class="line">...</span><br><span class="line">[100%] Built target seal</span><br></pre></td></tr></table></figure>

<p>使用 <code>make -j</code> 在 98% 的时候卡死，查询 <a href="https://blog.csdn.net/weixin_42634645/article/details/123688311">资料</a> 得知  <code>make -j</code> 会导致 CPU 高负载和桌面无响应，使用 <code>make</code> 成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents/SEAL]</span><br><span class="line">└─$ sudo make install</span><br><span class="line">[sudo] password <span class="keyword">for</span> kali: </span><br><span class="line">[ 35%] Built target libzstd_static</span><br><span class="line">[ 54%] Built target zlibstatic</span><br><span class="line">[100%] Built target seal</span><br><span class="line">Install the project...</span><br><span class="line">...</span><br><span class="line">-- Installing: /usr/local/include/SEAL-4.1/seal/util/uintcore.h</span><br><span class="line">-- Installing: /usr/local/include/SEAL-4.1/seal/util/ztools.h</span><br></pre></td></tr></table></figure>

<h3 id="测试-SEAL-库是否成功安装"><a href="#测试-SEAL-库是否成功安装" class="headerlink" title="测试 SEAL 库是否成功安装"></a>测试 SEAL 库是否成功安装</h3><h4 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents/SEAL]</span><br><span class="line">└─$ <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ <span class="built_in">mkdir</span> OpenPano</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ <span class="built_in">cd</span> OpenPano</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano]</span><br><span class="line">└─$ <span class="built_in">mkdir</span> SEALDemo</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano]</span><br><span class="line">└─$ <span class="built_in">cd</span> SEALDemo</span><br></pre></td></tr></table></figure>

<h4 id="新建-sealdemo-cpp"><a href="#新建-sealdemo-cpp" class="headerlink" title="新建 sealdemo.cpp"></a>新建 sealdemo.cpp</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ vim sealdemo.cpp</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ <span class="built_in">cat</span> sealdemo.cpp </span><br><span class="line"><span class="comment">#include &quot;seal/seal.h&quot;</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">using namespace seal;</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">        EncryptionParameters parms(scheme_type::bfv);</span><br><span class="line">        <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="新建-CMakeLists-txt"><a href="#新建-CMakeLists-txt" class="headerlink" title="新建 CMakeLists.txt"></a>新建 CMakeLists.txt</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ <span class="built_in">touch</span> CMakeLists.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ vim CMakeLists.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ <span class="built_in">cat</span> CMakeLists.txt</span><br><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project SEALDemo(VERSION 1.0)</span><br><span class="line">add_executable(sealdemo sealdemo.cpp)</span><br><span class="line">add_compile_options(-std=c++17)</span><br><span class="line"></span><br><span class="line">find_package(SEAL)</span><br><span class="line">target_link_libraries(sealdemo SEAL::seal)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="编译和运行测试-demo"><a href="#编译和运行测试-demo" class="headerlink" title="编译和运行测试 demo"></a>编译和运行测试 demo</h4><p>使用 <code>cmake</code> 编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ cmake .                                                                    </span><br><span class="line">CMake Error at CMakeLists.txt:2:</span><br><span class="line">  Parse error.  Expected <span class="string">&quot;(&quot;</span>, got identifier with text <span class="string">&quot;SEALDemo&quot;</span>.</span><br></pre></td></tr></table></figure>

<p>结果报错，根据报错信息判断是格式错误，查找 <a href="https://blog.csdn.net/qq_46000760/article/details/125005001#SnippetTab">资料</a> 更改第2行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ <span class="built_in">cat</span> CMakeLists.txt</span><br><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project (SEALDemo VERSION 1.0)</span><br><span class="line">add_executable(sealdemo sealdemo.cpp)</span><br><span class="line">add_compile_options(-std=c++17)</span><br><span class="line"></span><br><span class="line">find_package(SEAL)</span><br><span class="line">target_link_libraries(sealdemo SEAL::seal)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>cmake</code> 编译成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ cmake .           </span><br><span class="line">-- The C compiler identification is GNU 12.2.0</span><br><span class="line">-- The CXX compiler identification is GNU 12.2.0</span><br><span class="line">...</span><br><span class="line">-- Configuring <span class="keyword">done</span> (1.3s)</span><br><span class="line">-- Generating <span class="keyword">done</span> (0.0s)</span><br><span class="line">-- Build files have been written to: /home/kali/OpenPano/SEALDemo</span><br></pre></td></tr></table></figure>

<p>使用 <code>make</code> 生成可执行文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ make</span><br><span class="line">[ 50%] Building CXX object CMakeFiles/sealdemo.dir/sealdemo.cpp.o</span><br><span class="line">[100%] Linking CXX executable sealdemo</span><br><span class="line">[100%] Built target sealdemo</span><br></pre></td></tr></table></figure>

<p>执行 <code>sealdemo</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ ./sealdemo              </span><br></pre></td></tr></table></figure>

<p>成功 <code>return 0</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/OpenPano/SEALDemo]</span><br><span class="line">└─$ echo $?            </span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h2 id="学习-SEAL-Example"><a href="#学习-SEAL-Example" class="headerlink" title="学习 SEAL Example"></a>学习 SEAL Example</h2><p>SEAL 自带一些例子程序，在 <code>SEAL/native/examples</code> 文件夹下：</p>
<img src="/2023/12/30/SEAL/sealexamples-cpp.png" class>

<p>运行 <code>cmake</code> 命令编译这些例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents/SEAL]</span><br><span class="line">└─$ <span class="built_in">cd</span> native/examples</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents/SEAL/native/examples]</span><br><span class="line">└─$ cmake -S . -B build -DSEAL_ROOT=~/mylibs</span><br><span class="line">-- The CXX compiler identification is GNU 12.2.0</span><br><span class="line">...</span><br><span class="line">-- Configuring <span class="keyword">done</span> (0.4s)</span><br><span class="line">-- Generating <span class="keyword">done</span> (0.0s)</span><br><span class="line">-- Build files have been written to: /home/kali/Documents/SEAL/native/examples/build</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents/SEAL/native/examples]</span><br><span class="line">└─$ cmake --build build</span><br><span class="line">...</span><br><span class="line">[100%] Built target sealexamples</span><br></pre></td></tr></table></figure>

<p>编译完成之后可在 <code>SEAL/native/examples/build/bin</code> 下面找到可执行二进制文件 <code>sealexample</code>：</p>
<img src="/2023/12/30/SEAL/sealexamples-exe.png" class>

<p>接着运行该二进制文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Documents/SEAL/native/examples]</span><br><span class="line">└─$ <span class="built_in">cd</span> build/bin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/…/native/examples/build/bin]</span><br><span class="line">└─$ ./sealexamples</span><br><span class="line">Microsoft SEAL version: 4.1.1</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">| The following examples should be executed <span class="keyword">while</span> reading |</span><br><span class="line">| comments <span class="keyword">in</span> associated files <span class="keyword">in</span> native/examples/.       |</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">| Examples                   | Source Files               |</span><br><span class="line">+----------------------------+----------------------------+</span><br><span class="line">| 1. BFV Basics              | 1_bfv_basics.cpp           |</span><br><span class="line">| 2. Encoders                | 2_encoders.cpp             |</span><br><span class="line">| 3. Levels                  | 3_levels.cpp               |</span><br><span class="line">| 4. BGV Basics              | 4_bgv_basics.cpp           |</span><br><span class="line">| 5. CKKS Basics             | 5_ckks_basics.cpp          |</span><br><span class="line">| 6. Rotation                | 6_rotation.cpp             |</span><br><span class="line">| 7. Serialization           | 7_serialization.cpp        |</span><br><span class="line">| 8. Performance Test        | 8_performance.cpp          |</span><br><span class="line">+----------------------------+----------------------------+</span><br><span class="line">[      0 MB] Total allocation from the memory pool</span><br><span class="line"></span><br><span class="line">&gt; Run example (1 ~ 8) or <span class="built_in">exit</span> (0): </span><br></pre></td></tr></table></figure>

<p>终端显示如下界面：</p>
<img src="/2023/12/30/SEAL/sealexamples-run.png" class>

<p>总共有 8 个例子：</p>
<table>
<thead>
<tr>
<th align="center">SEAL Examples</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BFV Basics</td>
</tr>
<tr>
<td align="center">Encoders</td>
</tr>
<tr>
<td align="center">Levels</td>
</tr>
<tr>
<td align="center">BGV Basics</td>
</tr>
<tr>
<td align="center">CKKS Basics</td>
</tr>
<tr>
<td align="center">Rotation</td>
</tr>
<tr>
<td align="center">Serialization</td>
</tr>
<tr>
<td align="center">Performance Test</td>
</tr>
</tbody></table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://en.wikipedia.org/wiki/Microsoft_SEAL">Microsoft SEAL-Wikipedia</a><br><a href="https://github.com/microsoft/SEAL">Microsoft SEAL-Github</a><br><a href="https://blog.csdn.net/ldxcsdn/category_11390861.html">SEAL-普什清决-CSDN</a><br><a href="https://blog.csdn.net/y2y2999/article/details/120401918">Microsoft SEAL 库的安装与配置-CSDN</a><br><a href="https://zhuanlan.zhihu.com/p/83360110">微软同态加密库 SEAL 使用-知乎</a><br><a href="https://zhuanlan.zhihu.com/p/625323032">Microsoft-SEAL 库示例运行及分析-知乎</a><br><a href="https://zhuanlan.zhihu.com/p/581274964">Microsoft-SEAL 库学习记录-知乎</a><br><a href="https://blog.csdn.net/qq_46000760/article/details/121079835">Linux 安装 Microsoft SEAL-CSDN</a><br><a href="https://zhuanlan.zhihu.com/p/578128192">全同态加密运算库 Microsoft SEAL 安装过程-知乎</a><br><a href="https://blog.csdn.net/weixin_42634645/article/details/123688311">make -j 卡死-CSDN</a><br><a href="https://blog.csdn.net/qq_46000760/article/details/125005001#SnippetTab">ubuntu vcpkg-CSDN</a></p>
]]></content>
      <categories>
        <category>Homomorphic Encryption</category>
      </categories>
      <tags>
        <tag>Open Source Library</tag>
      </tags>
  </entry>
  <entry>
    <title>SecureCRT 的下载、安装和使用</title>
    <url>/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SecureCRT 是一个终端仿真应用程序，为计算专业人员提供安全的远程访问、文件传输和数据隧道。</p>
<span id="more"></span>

<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>从官方网站下载资源：<a href="https://www.vandyke.com/cgi-bin/releases.php?product=securecrt">https://www.vandyke.com/cgi-bin/releases.php?product=securecrt</a> 。</p>
<p>从百度网盘下载资源。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>双击 <code>scrt_sfx833-x64.exe</code> 运行安装程序。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/01-run.png" class>

<p>点击 <code>Next</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/02-next.png" class>

<p>勾选 <code>I accept ...</code> ，点击 <code>Next</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/03-accept.png" class>

<p>勾选 <code>Common profile</code> ，点击 <code>Next</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/04-common.png" class>

<p>选择 <code>Custom</code> ，点击 <code>Next</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/05-custom.png" class>

<p>点击 <code>Choose</code> 选择自定义安装目录，点击 <code>Next</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/06-folder.png" class>

<p>默认勾选，点击 <code>Next</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/07-next.png" class>

<p>点击 <code>Install</code> ，开始安装。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/08-install.png" class>

<p>安装完毕，点击 <code>Finish</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/09-finish.png" class>

<p>激活方式参考 <a href="https://zhuanlan.zhihu.com/p/163089404">SecureCRT 的下载、安装、激活 | 知乎 | ytrunning</a> 。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h2><p>打开以后进入主界面，点击 File ，有三种连接：<code>Connect...</code> 、<code>Quick Connect</code> 和 <code>Local Connect</code>，分别是已存储的连接、快速连接和本地连接。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/10-three-type.png" class>

<p>点击 <code>Quick Connect</code> ，默认是 <code>SSH2</code> ，其中 <code>Hostname</code> 填写虚拟机 IP 地址， <code>Username</code> 填写虚拟机用户名，若是密钥登录，勾选 <code>PublicKey</code> ；若是密码登录，勾选 <code>Password</code> 。填写、勾选完毕后，点击 <code>Connect</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/11-fill-up.png" class>

<p>接下来填写并确认密码，勾选 <code>Save password</code> 保存密码，点击 <code>OK</code> 进行连接。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/12-password.png" class>

<p>连接成功！</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/13-success.png" class>

<h2 id="SecureFX"><a href="#SecureFX" class="headerlink" title="SecureFX"></a>SecureFX</h2><p>SecureFX 有两种打开方式：</p>
<p>1.如果已经打开 SecureCRT ，点击 <code>SecureFX</code> 图标即可打开。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/14-SecureFX.png" class>

<p>2.如果没有打开 SecureCRT，打开 SecureFX 应用。</p>
<p>打开 SerureFX 后：</p>
<p>1.如果已经登录过 SecureCRT ， <code>Sessions</code> 有已连接过的 IP ，点击 <code>Connect</code> 直接连接。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/15-had-connected.png" class>

<p>2.如果没有登录过 SecureCRT ，进行与 SecureCRT 中相似的操作进行连接。</p>
<p>连接成功后，进入管理页面。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/16-success-file.png" class>

<p>可直接手动拖动文件，文件传输成功后，会显示 <code>Finished</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/17-finished.png" class>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="更改终端外观"><a href="#更改终端外观" class="headerlink" title="更改终端外观"></a>更改终端外观</h2><p>点击 <code>Options</code> ，选择 <code>Session Options...</code> 。</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/18-options.png" class>

<p>选中 <code>Appearance</code> ，设置 <code>Current color scheme</code> 为 <code>White/Black</code> ，点击 <code>Font...</code> 调整字体和大小。 </p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/19-scheme-font.png" class>

<p>更改终端外观成功！</p>
<img src="/2024/03/16/SecureCRT%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/20-change-success.png" class>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/qq_39052513/article/details/100272502">SecureCRT 的下载、安装 | CSDN | 超Ren专属</a></p>
<p><a href="https://blog.csdn.net/qq_39052513/article/details/104692026">SecureCRT 的使用教程 | CSDN | 超Ren专属</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/163089404">SecureCRT 的下载、安装、激活 | 知乎 | ytrunning</a> </p>
]]></content>
      <categories>
        <category>Download &amp; Install &amp; Configure</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Solaris 10 的下载、安装和配置</title>
    <url>/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="映像下载"><a href="#映像下载" class="headerlink" title="映像下载"></a>映像下载</h1><p>使用的是 <a href="https://www.cnblogs.com/shrec/p/4257353.html">在 VirtualBox 上安装 Solaris 10 全教程（包括下载） </a> 提供的资源。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/01-iso.png" class>

<p>下载完毕，记住 iso 文件所在位置。</p>
<span id="more"></span>

<h1 id="虚拟机创建"><a href="#虚拟机创建" class="headerlink" title="虚拟机创建"></a>虚拟机创建</h1><p>打开 VMware Workstation，然后点击 <code>创建虚拟机</code> 。</p>
<p>选择 <code>自定义安装</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/02-create-vm.png" class>

<p>默认，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/03-hardware-function.png" class>

<p>选择 <code>稍候安装操作系统</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/04-install-os.png" class>

<p>选择 <code>Linux(L)</code> ，选择 <code>Solaris 10</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/05-choose-os.png" class>

<p>设置 <code>虚拟机名称</code> ，选择 <code>位置</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/06-name-and-location.png" class>

<p>选择 <code>指定处理器数量</code> ，数量越多，性能越好，根据需要分配。然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/07-cpu-core.png" class>

<p>根据需要 <code>分配内存</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/08-memory.png" class>

<p>网络连接选择 NAT，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/09-network.png" class>

<p>默认，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/10-LSI.png" class>

<p>默认，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/11-disk.png" class>

<p>选择 <code>创建新虚拟硬盘</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/12-create-new-disk.png" class>

<p>指定 <code>磁盘容量</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/13-max-disk.png" class>

<p>指定 <code>磁盘文件存储</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/14-disk-location.png" class>

<p>点击 <code>完成</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/15-complete.png" class>

<h1 id="使用映像文件"><a href="#使用映像文件" class="headerlink" title="使用映像文件"></a>使用映像文件</h1><p>点击 <code>编辑虚拟机设置</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/16-edit-setting.png" class>

<p>点击 <code>硬件</code> 下的 <code>CD/DVD</code> ，选择 <code>使用ISO映像文件</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/17-choose-iso.png" class>

<p>点击 <code>开启此虚拟机</code> 。</p>
<h1 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h1><h2 id="配置类型"><a href="#配置类型" class="headerlink" title="配置类型"></a>配置类型</h2><p>选择 <code>1.Solaris Interactive(default)</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/18-choose-1.png" class>

<h2 id="键盘布局"><a href="#键盘布局" class="headerlink" title="键盘布局"></a>键盘布局</h2><p>选择 <code>US-English</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/19-choose-US.png" class>

<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>选择 <code>6.Simplified Chinese</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/20-choose-SC.png" class>

<h2 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h2><p>选择 <code>联网的</code> ，点击 <code>下一步</code>。（注意：图文不符）</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/21-choose-network.png" class>

<h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><p>默认 <code>是</code> ，点击 <code>下一步</code>。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/21-choose-DHCP.png" class>

<h2 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h2><p>默认 <code>否</code> ，点击 <code>下一步</code>。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/22-choose-Kerberos.png" class>

<h2 id="名称服务"><a href="#名称服务" class="headerlink" title="名称服务"></a>名称服务</h2><p>默认 <code>无</code> ，点击 <code>下一步</code>。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/23-choose-name.png" class>

<h2 id="NFSv4-域名"><a href="#NFSv4-域名" class="headerlink" title="NFSv4 域名"></a>NFSv4 域名</h2><p>默认 <code>使用系统派生的 NFSv4 域</code> ，点击 <code>下一步</code>。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/24-choose-NFSv4.png" class>

<h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>默认 <code>地域性的洲/国家/地区</code> ，点击 <code>下一步</code>。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/25-choose-timezone.png" class>

<h2 id="洲与国家"><a href="#洲与国家" class="headerlink" title="洲与国家"></a>洲与国家</h2><p>选择 <code>亚洲-中国</code> ，点击 <code>下一步</code>。</p>


<h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p>默认即可，点击 <code>下一步</code>。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/27-date-time.png" class>

<h2 id="root-口令"><a href="#root-口令" class="headerlink" title="root 口令"></a>root 口令</h2><p>输入超级用户（root）口令，点击 <code>下一步</code>。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/28-root-pwd.png" class>

<p>请记住，稍后登录需要。</p>
<h2 id="远程服务"><a href="#远程服务" class="headerlink" title="远程服务"></a>远程服务</h2><p>默认 <code>是</code> ，点击 <code>下一步</code>。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/29-remote.png" class>

<h2 id="确认信息"><a href="#确认信息" class="headerlink" title="确认信息"></a>确认信息</h2><p>确认信息正确后，点击 <code>确认</code>。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/30-complete.png" class>

<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/31-wait.png" class>

<h1 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h1><h2 id="欢迎"><a href="#欢迎" class="headerlink" title="欢迎"></a>欢迎</h2><p>配置结束，开始安装，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/32-welcome.png" class>

<h2 id="安装选项-1"><a href="#安装选项-1" class="headerlink" title="安装选项"></a>安装选项</h2><p>默认 <code>是</code> ，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/33-install.png" class>

<h2 id="指定媒体"><a href="#指定媒体" class="headerlink" title="指定媒体"></a>指定媒体</h2><p>默认 <code>CD/DVD</code> ，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/34-media.png" class>

<h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>勾选 <code>接收</code> ，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/35-accept.png" class>

<h2 id="安装类型"><a href="#安装类型" class="headerlink" title="安装类型"></a>安装类型</h2><p>选择 <code>自定义安装</code> ，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/36-install-type.png" class>

<h2 id="软件语言"><a href="#软件语言" class="headerlink" title="软件语言"></a>软件语言</h2><p>勾选 <code>中文(zh)</code> 和 <code>中文(UTF-8)</code> ，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/37-software-language.png" class>

<h2 id="系统语言"><a href="#系统语言" class="headerlink" title="系统语言"></a>系统语言</h2><p>选择 <code>中文(UFT-8)</code> ，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/38-system-language.png" class>

<h2 id="附加产品"><a href="#附加产品" class="headerlink" title="附加产品"></a>附加产品</h2><p>默认 <code>无</code> ，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/39-attach.png" class>

<h2 id="Solaris-软件组"><a href="#Solaris-软件组" class="headerlink" title="Solaris 软件组"></a>Solaris 软件组</h2><p>默认即可，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/40-group.png" class>

<h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><p>默认即可，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/41-disk.png" class>

<h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>默认即可，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/42-disk-sector.png" class>

<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/43-disk-sector.png" class>

<h2 id="分布文件系统"><a href="#分布文件系统" class="headerlink" title="分布文件系统"></a>分布文件系统</h2><p>默认即可，点击 <code>下一步</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/44-file-system.png" class>

<h2 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h2><p>确认信息正确后，点击 <code>立即安装</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/45-install.png" class>

<p>等待安装。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/46-wait.png" class>

<p>最后弹出多次对话框，均点击 <code>继续</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/47-continue-1.png" class>

<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/48-continue-2.png" class>

<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/49-continue-3.png" class>

<h1 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h1><h2 id="输入用户名"><a href="#输入用户名" class="headerlink" title="输入用户名"></a>输入用户名</h2><p>输入用户名为超级用户（root）。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/50-user.png" class>

<h2 id="输入口令并确认"><a href="#输入口令并确认" class="headerlink" title="输入口令并确认"></a>输入口令并确认</h2><p>输入口令为之前已经设置的 root 口令。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/28-root-pwd.png" class>

<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/51-password.png" class>

<h2 id="选择桌面"><a href="#选择桌面" class="headerlink" title="选择桌面"></a>选择桌面</h2><p>默认 <code>Java 桌面系统（版本3）</code> ，点击 <code>确定</code> 。</p>
<img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/52-desktop.png" class>

<h2 id="进入系统"><a href="#进入系统" class="headerlink" title="进入系统"></a>进入系统</h2><img src="/2024/03/17/Solaris10%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/53-enter.png" class>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/shrec/p/4257353.html">在 VirtualBox 上安装 Solaris 10 全教程（包括下载） </a></p>
]]></content>
      <categories>
        <category>Download &amp; Install &amp; Configure</category>
      </categories>
      <tags>
        <tag>Virtual Machine</tag>
        <tag>Solaris</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-12.04 的下载、安装和配置</title>
    <url>/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="映像下载"><a href="#映像下载" class="headerlink" title="映像下载"></a>映像下载</h1><p>首先进入 Ubuntu 的<a href="https://old-releases.ubuntu.com/releases/12.04/">镜像下载站</a>，然后下载桌面版。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/01-iso.png" class>

<p>下载完毕，记住 iso 文件所在位置。</p>
<span id="more"></span>

<h1 id="虚拟机创建"><a href="#虚拟机创建" class="headerlink" title="虚拟机创建"></a>虚拟机创建</h1><p>打开 VMware Workstation，然后点击 <code>创建虚拟机</code> 。</p>
<p>选择 <code>自定义安装</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/02-create-vm.png" class>

<p>默认，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/03-hardware-function.png" class>

<p>选择 <code>稍候安装操作系统</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/04-install-os.png" class>

<p>选择 <code>Linux(L)</code> ，选择 <code>Ubuntu</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/05-choose-os.png" class>

<p>设置 <code>虚拟机名称</code> ，选择 <code>位置</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/06-name-and-location.png" class>

<p>选择 <code>指定处理器数量</code> ，数量越多，性能越好，根据需要分配。然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/07-cpu-core.png" class>

<p>根据需要 <code>分配内存</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/08-memory.png" class>

<p>网络连接选择 NAT，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/09-network.png" class>

<p>默认，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/10-SCSI.png" class>

<p>默认，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/11-disk.png" class>

<p>选择 <code>创建新虚拟硬盘</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/12-create-new-disk.png" class>

<p>指定 <code>磁盘容量</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/13-max-disk.png" class>

<p>指定 <code>磁盘文件存储</code> ，然后点击 <code>下一步</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/14-disk-location.png" class>

<p>点击 <code>完成</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/15-complete.png" class>

<h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><p>点击 <code>编辑虚拟机设置</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/16-edit-setting.png" class>

<p>点击 <code>硬件</code> 下的 <code>CD/DVD</code> ，选择 <code>使用ISO映像文件</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/17-choose-iso.png" class>

<p>点击 <code>开启此虚拟机</code> 。</p>
<h2 id="欢迎"><a href="#欢迎" class="headerlink" title="欢迎"></a>欢迎</h2><p>选择 <code>中文</code> ，点击 安装 <code>Ubuntu</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/18-language.png" class>

<h2 id="准备安装-Ubuntu"><a href="#准备安装-Ubuntu" class="headerlink" title="准备安装 Ubuntu"></a>准备安装 Ubuntu</h2><p>不选择，点击 <code>继续</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/19-ready.png" class>

<h2 id="安装类型"><a href="#安装类型" class="headerlink" title="安装类型"></a>安装类型</h2><p>选择 <code>清除整个磁盘并且安装 Ubuntu</code> ，点击 <code>继续</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/20-install-type.png" class>

<p>点击 <code>现在安装</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/21-now-install.png" class>

<h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>选择 <code>shanghai</code> ，点击 <code>继续</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/22-choose-timezone.png" class>

<h2 id="键盘布局"><a href="#键盘布局" class="headerlink" title="键盘布局"></a>键盘布局</h2><p>选择 <code>汉语</code> ，点击 <code>继续</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/23-choose-chinese.png" class>

<h2 id="用户名与密码"><a href="#用户名与密码" class="headerlink" title="用户名与密码"></a>用户名与密码</h2><p>输入 <code>用户名</code> 和 <code>密码</code> ，可勾选 <code>自动登录</code> ，点击 <code>继续</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/24-user-password.png" class>

<h2 id="等待安装"><a href="#等待安装" class="headerlink" title="等待安装"></a>等待安装</h2><p>等待安装完毕，点击 <code>现在重启</code> 。</p>
<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/25-wait.png" class>

<img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/26-restart.png" class>

<h2 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h2><img src="/2024/03/16/Ubuntu-12-04%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/27-complete.png" class>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/yongh701/article/details/44999959">【Linux】Ubuntu12.04的下载与安装 | CSDN | yongh701</a></p>
]]></content>
      <categories>
        <category>Download &amp; Install &amp; Configure</category>
      </categories>
      <tags>
        <tag>Virtual Machine</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode 配置 Java 环境</title>
    <url>/2024/01/02/VSCode%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h1><img src="/2024/01/02/VSCode%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/01-install-extension.png" class>

<span id="more"></span>

<h1 id="配置-JDK"><a href="#配置-JDK" class="headerlink" title="配置 JDK"></a>配置 JDK</h1><p>…</p>
<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><p>Ctrl + Shift + P 唤出命令窗口，输入 Java: Create Java Project，选择 No Build Tool。</p>
<img src="/2024/01/02/VSCode%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/02-create-project.png" class>

<img src="/2024/01/02/VSCode%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/03-choose-nobuildtool.png" class>


<p>选择项目地址，输入项目名称。注意项目地址和项目名称中不能包含中文。</p>
<p>项目创建成功，打开项目中 src 中的 App.java 文件，等待出现 Run|Debug。</p>
<img src="/2024/01/02/VSCode%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/04-wait-run.png" class>

<p>出现 Run|Debug 后点击 Run，输出 Hellow Word! 代表成功。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Download &amp; Install &amp; Configure</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 代码模板</title>
    <url>/2024/03/24/VSCode%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>使用 VSCode 编写程序时，一段代码或说明会重复出现，使用模板有利于提高我们的工作效率。</p>
<span id="more"></span>

<h1 id="创建代码模板"><a href="#创建代码模板" class="headerlink" title="创建代码模板"></a>创建代码模板</h1><p>通过以下两种方式找到 <code>用户代码片段</code> ：</p>
<p>1.文件 &gt; 首选项 &gt; 配置用户代码片段。</p>
<img src="/2024/03/24/VSCode%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/01-way-one.png" class title="01-way-one">

<p>2.管理 &gt; 用户代码片段。</p>
<img src="/2024/03/24/VSCode%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/02-way-two.png" class title="02-way-two">

<p>选择对应的语言，若无该语言，安装该语言插件即可。</p>
<blockquote>
<p>注意 markdown 需要参考 <a href="https://blog.csdn.net/yageeart/article/details/103097193">CSDN 博客</a> 进行设置。</p>
</blockquote>


<p>Snippet 的内容使用 JSON 格式定义，以下为给出的例子：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;console.log(&#x27;$1&#x27;);&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$2&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">键</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Print to console</td>
<td align="center">Snippet 名称</td>
</tr>
<tr>
<td align="center">prefix</td>
<td align="center">代码块使用快捷方式。<br>prefix 代表键入前缀，按 Tab 键，代码块就会被使用。</td>
</tr>
<tr>
<td align="center">body</td>
<td align="center">代码块内容。<br>换行使用 <code>\\r\\n</code>。</td>
</tr>
<tr>
<td align="center">description</td>
<td align="center">VSCode 感知到前缀，显示的说明内容。</td>
</tr>
<tr>
<td align="center">$1,$2,$0</td>
<td align="center">指定代码模块生成后，编辑光标出现位置。<br>使用 Tab 键进行切换（编辑光标按$1,$2,$3…$0的顺序跳转）。<br>$0是光标最后可切换位置。</td>
</tr>
</tbody></table>
<h1 id="使用代码模板"><a href="#使用代码模板" class="headerlink" title="使用代码模板"></a>使用代码模板</h1><p>测试使用给出的例子，敲出 <code>log</code> ，出现代码模块，回车成功使用模板：</p>
<img src="/2024/03/24/VSCode%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/04-use.gif" class title="04-use">

<h1 id="Snippet-语法"><a href="#Snippet-语法" class="headerlink" title="Snippet 语法"></a>Snippet 语法</h1><h2 id="Tabstops"><a href="#Tabstops" class="headerlink" title="Tabstops"></a>Tabstops</h2><p><code>$1</code> ， <code>$2</code> 指定代码块生成后，光标出现的位置；不同位置的相同 <code>$1</code> 位置同时出现光标。</p>
<h2 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h2><p>给光标出现位置加上默认值；例如，<code>$&#123;1:another $&#123;2:placeholder&#125;&#125;</code>；<code>$1</code> 处位置默认值是 <code>another</code>。</p>
<h2 id="Choice"><a href="#Choice" class="headerlink" title="Choice"></a>Choice</h2><p>光标位置设置多个值可供选择; 例如，<code>$&#123;1|one,two,three|&#125;</code>；<code>$1</code> 位置处可以选择 <code>one</code>,<code>two</code>,<code>three</code> 中一个词填充在此处。</p>
<h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><h3 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h3><ul>
<li><code>TM_SELECTED_TEXT</code> 当前选中内容或空字符串</li>
<li><code>TM_CURRENT_LINE</code> 当前行内容</li>
<li><code>TM_CURRENT_WORD</code> 光标处字符或空字符串</li>
<li><code>TM_LINE_INDEX</code> 从0开始的行号</li>
<li><code>TM_LINE_NUMBER</code> 从1开始的行号</li>
<li><code>TM_FILENAME</code> 当前被编辑文档名</li>
<li><code>TM_FILENAME_BASE</code> 当前被编辑文档名，没有后缀</li>
<li><code>TM_DIRECTORY</code> 当前被编辑文档目录</li>
<li><code>TM_FILEPATH</code> 当前被编辑文档全路径</li>
<li><code>CLIPBOARD</code> 当前剪切板内容</li>
</ul>
<h3 id="日期和时间相关变量"><a href="#日期和时间相关变量" class="headerlink" title="日期和时间相关变量"></a>日期和时间相关变量</h3><ul>
<li><code>CURRENT_YEAR</code> 当前年</li>
<li><code>CURRENT_YEAR_SHORT</code> 当前年后两位</li>
<li><code>CURRENT_MONTH</code> 月份，两位数字表示，例如02</li>
<li><code>CURRENT_MONTH_NAME</code> 月份全称，例如 ‘July’</li>
<li><code>CURRENT_MONTH_NAME_SHORT</code> 月份简写 ，例如’Jul</li>
<li><code>CURRENT_DATE</code> 某天</li>
<li><code>CURRENT_DAY_NAME</code> 星期几， 例如’Monday’)</li>
<li><code>CURRENT_DAY_NAME_SHORT</code> 星期几的简写， ‘Mon’</li>
<li><code>CURRENT_HOUR</code> 小时，24小时制</li>
<li><code>CURRENT_MINUTE</code> 分钟</li>
<li><code>CURRENT_SECOND</code> 秒数</li>
</ul>
<h3 id="变量格式化"><a href="#变量格式化" class="headerlink" title="变量格式化"></a>变量格式化</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$<span class="punctuation">&#123;</span>TM_FILENAME/(.*)\\..+$/$<span class="number">1</span>/<span class="punctuation">&#125;</span></span><br><span class="line">| | | |</span><br><span class="line">| | | |-&gt; no options</span><br><span class="line">| | |</span><br><span class="line">| | |-&gt; references the contents of the first</span><br><span class="line">| | capture group</span><br><span class="line">| |</span><br><span class="line">| |-&gt; regex to capture everything before</span><br><span class="line">| the final `.suffix`</span><br><span class="line">|</span><br><span class="line">|-&gt; resolves to the filename</span><br></pre></td></tr></table></figure>

<h1 id="示例-Snippet"><a href="#示例-Snippet" class="headerlink" title="示例 Snippet"></a>示例 Snippet</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;python template&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pyHeader&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;#!user/bin/python&quot;</span></span><br><span class="line">        <span class="string">&quot;# _*_ coding: utf-8 _*_&quot;</span></span><br><span class="line">        <span class="string">&quot; &quot;</span></span><br><span class="line">        <span class="string">&quot;# @File : $TM_FILENAME&quot;</span></span><br><span class="line">        <span class="string">&quot;# @Version : 1.0&quot;</span></span><br><span class="line">        <span class="string">&quot;# @Author : xxxxxxx&quot;</span></span><br><span class="line">        <span class="string">&quot;# @Email : xxxxxxx&quot;</span></span><br><span class="line">        <span class="string">&quot;# @Time : $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;</span></span><br><span class="line">        <span class="string">&quot;#Description:&quot;</span></span><br><span class="line">        <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;import datetime&quot;</span></span><br><span class="line">        <span class="string">&quot;start_time = datetime.datetime.now()&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;end_time = datetime.datetime.now()&quot;</span></span><br><span class="line">        <span class="string">&quot;print(end_time-start_time)&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my vue python template&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and</span></span><br><span class="line">    <span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">    <span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the</span></span><br><span class="line">    <span class="comment">// same ids are connected.</span></span><br><span class="line">    <span class="comment">// Example:</span></span><br><span class="line">    <span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log|console&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;console.log(&#x27;$1&#x27;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$2&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;For_Loop&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;for&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;for (const $&#123;2:element&#125; of $&#123;1:array&#125;) &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;\t$0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;For Loop&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;console.log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;console.log($1)&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;console.log&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;notes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot; * @method $1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot; * @description $2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot; * @param $2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot; * @return $2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot; */&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;notes 方法注释&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;todo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;todo|TODO&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;// !!!TODO $1&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TODO: // !!!TODO $1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/zc-lee/p/15964013.html">VSCode 代码模板 | zc-lee | 博客园</a></p>
<p><a href="https://blog.csdn.net/yageeart/article/details/103097193">VSCode markdown 开启 Snippets | CSDN博客</a></p>
]]></content>
      <categories>
        <category>Download &amp; Install &amp; Configure</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/12/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用 Hexo &amp; Github 搭建个人博客</title>
    <url>/2023/12/24/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">git version 2.35.1.windows.2</span><br></pre></td></tr></table></figure>

<h2 id="npm-node-js"><a href="#npm-node-js" class="headerlink" title="npm &amp; node.js"></a>npm &amp; node.js</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm version</span><br><span class="line">&#123;</span><br><span class="line">  npm: <span class="string">&#x27;9.1.2&#x27;</span>,</span><br><span class="line">  node: <span class="string">&#x27;16.15.1&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h1><p>如果你的 SSH key 未安装，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>@example.com</code> 是 Github 账户的注册邮箱。</p>
<p>执行命令后，ENTER 三次后出现 key path。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\...\.ssh\id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>使用记事本打开 <code>id_rsa.pub</code> 文件并复制内容。</p>
<h1 id="Github-创建仓库"><a href="#Github-创建仓库" class="headerlink" title="Github 创建仓库"></a>Github 创建仓库</h1><p>创建名为 <code>Username.github.io</code> 的新仓库，<code>Username</code> 为 Github 账户名。</p>
<p>输入仓库名的界面应该显示为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Username / Username.github.io</span><br></pre></td></tr></table></figure>

<h1 id="Github-新建-SSH-key"><a href="#Github-新建-SSH-key" class="headerlink" title="Github 新建 SSH key"></a>Github 新建 SSH key</h1><p>打开 Github <code>Settings</code> 中的 <code>SSH and GPG keys</code>，点击新建一个 SSH key：</p>
<p>其中 <code>Title</code> 随意, <code>Key</code> 是 <code>id_rsa.pub</code> 文件的内容。</p>
<p>使用以下命令来测试 SSH 连接是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>出现以下信息代表成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hi Username! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>执行以下命令安装 Hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<p>如果失败执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h1 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init FileName</span><br><span class="line"><span class="built_in">cd</span> FileName</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p><code>FileName</code> 为你的博客文件夹。</p>
<h1 id="部署-Hexo"><a href="#部署-Hexo" class="headerlink" title="部署 Hexo"></a>部署 Hexo</h1><p>复制 Github 仓库下 <code>Clone with SSH</code> 的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git@github.com:Username/username.github.io.git</span><br></pre></td></tr></table></figure>

<p>打开 <code>Filename</code> 文件夹下的 <code>_config.yml</code> 文件，repo 后复制上一步的内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:Username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>注意 repo 后的空格。</p>
<h1 id="发布-Hexo"><a href="#发布-Hexo" class="headerlink" title="发布 Hexo"></a>发布 Hexo</h1><p><code>Filename</code> 文件夹下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g <span class="comment"># generate</span></span><br><span class="line">hexo s <span class="comment"># server</span></span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://localhost:4000/">http://localhost:4000</a> 来预览，端口默认 4000 可以自定义。</p>
<p>执行以下命令上传至 Github 仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d <span class="comment"># upload</span></span><br></pre></td></tr></table></figure>

<p>访问 <a href="https://username.github.io/">https://username.github.io</a> 即可。</p>
<h1 id="撰写博客"><a href="#撰写博客" class="headerlink" title="撰写博客"></a>撰写博客</h1><p>执行下列命令来创建一篇新页面或者新文章：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>Hexo 有 3 种默认 layout：<code>post</code>、<code>page</code> 和 <code>draft</code>。</p>
<p>首先手动创建 <code>about</code> 、<code>categories</code> 和 <code>tags</code> 页面，并添加 layout 属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">date: 2023-12-24 17:00:00</span><br><span class="line">layout: about</span><br><span class="line">---​</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2023-12-24 17:00:00</span><br><span class="line">layout: categories</span><br><span class="line">---​</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2023-12-24 17:00:00</span><br><span class="line">layout: tags</span><br><span class="line">---​</span><br></pre></td></tr></table></figure>

<p>如果我们想写一篇名为 <code>test</code> 的文章，在 <code>A</code> 分类，标签为 <code>B</code> 和 <code>C</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">date: 2023-12-24 17:00:00</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">-</span> A</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> B</span><br><span class="line"><span class="section">- C</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>写完之后执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s </span><br><span class="line">hexo d </span><br></pre></td></tr></table></figure>

<p>执行 <code>hexo s</code> 即可打开 <a href="http://localhost:4000/">http://localhost:4000</a> 预览文章效果。 </p>
<p>执行 <code>hexo d</code> 上传至 Github，等待片刻 <a href="https://username.github.io/">https://username.github.io</a> 查看博客。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/655349835">手把手教你使用 Hexo+GitHub 搭建个人博客并发布文章-知乎</a><br><a href="https://zhuanlan.zhihu.com/p/376366002">Hexo+Github 搭建博客-知乎</a><br><a href="https://www.yunyoujun.cn/posts/how-to-build-your-site#%E4%BD%BF%E7%94%A8-hexo-%E4%B8%BB%E9%A2%98">教你如何从零开始搭建一个属于自己的网站-云游君的小站</a><br><a href="https://zhuanlan.zhihu.com/p/251363116#:~:text=%E6%B5%8B%E8%AF%95hexo%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%EF%BC%9A%20%24%20hexo%20new%20test%20%24%20hexo%20g,test%E8%A1%A8%E7%A4%BA%E6%96%B0%E5%BB%BA%E4%B8%80%E7%AF%87%E5%90%8D%E4%B8%BAtest%E7%9A%84%E5%8D%9A%E6%96%87%EF%BC%8Chexo%20g%E8%A1%A8%E7%A4%BA%E7%94%9F%E6%88%90%EF%BC%8C%E6%98%AFhexo%20generate%E7%9A%84%E7%AE%80%E5%86%99%EF%BC%8Chexo%20s%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8Chexo%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%98%AFhexo%20server%E7%9A%84%E7%AE%80%E5%86%99%E3%80%82%20%E6%88%90%E5%8A%9F%E5%90%8E%E4%BC%9A%E6%9C%89%E5%A6%82%E4%B8%8B%E6%8F%90%E7%A4%BA%EF%BC%8C%E8%BF%9B%E5%85%A5%20http%3A%2F%2Flocalhost%3A4000%20%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E5%88%9A%E5%88%9A%E7%94%9F%E6%88%90%E7%9A%84%E7%BD%91%E9%A1%B5%E3%80%82">hexo 基本安装及配置-知乎</a></p>
<p><a href="https://hexo.io/zh-cn/docs/writing.html">写作-Hexo</a><br><a href="https://zhuanlan.zhihu.com/p/132823826">使用 Hexo 新建、编辑并预览文章-知乎</a></p>
]]></content>
      <categories>
        <category>How to Start a Personal Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Utterances 为 Hexo + NexT 博客添加评论</title>
    <url>/2024/03/26/%E4%BD%BF%E7%94%A8Utterances%E4%B8%BAHexo-NexT%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA/</url>
    <content><![CDATA[<p>Utterances 是一个基于 Github issues 构建的轻量级评论插件，只有使用 Github 账号登录后才能评论。NexT 7.0.0 版本已经集成了 Utterances ，故非常方便使用 Utterances 来为 Hexo + NexT 博客添加评论。</p>
<p>Utterances：<a href="https://utteranc.es/">https://utteranc.es/</a></p>
<p>Github：<a href="https://github.com/utterance/utterances">https://github.com/utterance/utterances</a></p>
<span id="more"></span>

<h1 id="新建-Github-仓库"><a href="#新建-Github-仓库" class="headerlink" title="新建 Github 仓库"></a>新建 Github 仓库</h1><p>由于是基于 Github issues，我们需要一个仓库来存储评论，所以我们需要在 Github 上创建一个空库，并且必须是 pulbic 的，这样用户才可以查看并发布评论。</p>
<p><img src="/"></p>
<h1 id="安装-Github-App"><a href="#安装-Github-App" class="headerlink" title="安装 Github App"></a>安装 Github App</h1><p>地址：<a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a></p>
<p>访问安装地址，进入安装页面，单击 <code>Install</code> 按钮。</p>
<p><img src="/"></p>
<p>选择关联的仓库，我们选择刚刚建好的仓库。</p>
<p><img src="/"></p>
<p>至此，Github 端配置完成，接下来在网页或博客中配置使用 Utterances 。</p>
<h1 id="在-Hexo-NexT-中使用"><a href="#在-Hexo-NexT-中使用" class="headerlink" title="在 Hexo NexT 中使用"></a>在 Hexo NexT 中使用</h1><p>编辑 Hexo 主题配置文件 <code>_config.yml</code>，添加以下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Utterances</span></span><br><span class="line"><span class="comment"># For more information: https://utteranc.es</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">FreesiaNZ/freesianz.comments</span> <span class="comment"># Github repository owner and name</span></span><br><span class="line">  <span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure>

<p>为了更好地匹配我的自定义主题，修改文件：<br><code>themes\next\source\css\_common\components\third-party\utterances.styl</code> 。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">if</span> <span class="string">(hexo-config(&#x27;utterances.enable&#x27;))</span> &#123;</span><br><span class="line">  <span class="string">.utterances</span> &#123;</span><br><span class="line">    <span class="attr">max-width:</span> <span class="string">unset;</span></span><br><span class="line">    <span class="attr">background:</span> <span class="string">rgba(255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span><span class="string">)</span> <span class="string">none</span> <span class="string">repeat</span> <span class="string">scroll</span> <span class="type">!important;</span></span><br><span class="line">    <span class="attr">border-radius:</span> <span class="string">10px;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终评论的效果：</p>
<p><img src="/"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.lanweihong.com/posts/24011/">Hexo NexT 主题使用 utterances 搭建评论系统 | 蓝伟洪的博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/76237379">Hexo + NexT 使用 utterances 评论插件 | 知乎</a></p>
]]></content>
      <categories>
        <category>How to Start a Personal Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Utterances</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Docker 构建 Prometheus + Grafana 监控集群系统</title>
    <url>/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><table>
<thead>
<tr>
<th align="center">VM</th>
<th align="center">Environment</th>
<th align="center">IP</th>
<th align="center">Service</th>
</tr>
</thead>
<tbody><tr>
<td align="center">server</td>
<td align="center">docker</td>
<td align="center">192.168.45.133</td>
<td align="center">Prometheus Server, Node Exporter, cAdvisor, Grafana</td>
</tr>
<tr>
<td align="center">client</td>
<td align="center">docker</td>
<td align="center">192.168.45.132</td>
<td align="center">Node Exporter、cAdvisor</td>
</tr>
<tr>
<td align="center">nginx</td>
<td align="center">nginx</td>
<td align="center">192.168.45.134</td>
<td align="center">&#x2F;</td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="部署-node-exporter"><a href="#部署-node-exporter" class="headerlink" title="部署 node_exporter"></a>部署 node_exporter</h1><blockquote>
<p>server、client.</p>
</blockquote>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull prom/node-exporter</span><br><span class="line">docker run --name=node-exporter -p 9100:9100 -itd prom/node-exporter</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/01-node.png" class>

<p>访问：<a href="http://192.168.45.133:9100/">http://192.168.45.133:9100</a> 查看节点信息。</p>
<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/02-view.png" class>

<h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull prom/node-exporter</span><br><span class="line">docker run --name=node-exporter -p 9100:9100 -itd prom/node-exporter</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/03-node.png" class>

<p>访问：<a href="http://192.168.45.132:9100/">http://192.168.45.132:9100</a> 查看节点信息。</p>
<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/04-view.png" class>

<h1 id="安装-prometheus"><a href="#安装-prometheus" class="headerlink" title="安装 prometheus"></a>安装 prometheus</h1><blockquote>
<p>server.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /server/docker/prometheus/&#123;server,client&#125;</span><br><span class="line"><span class="built_in">touch</span> /server/docker/prometheus/server/rules.yml</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/05-add.png" class>

<p>编辑 prometheus.yml 文件，添加客户端信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /server/docker/prometheus/server/prometheus.yml</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/05-add.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:</span><br><span class="line">  external_labels:</span><br><span class="line">    monitor: <span class="string">&#x27;codelab-monitor&#x27;</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9090&#x27;</span>,<span class="string">&#x27;192.168.45.133:9100&#x27;</span>]</span><br><span class="line">  - job_name: <span class="string">&#x27;client-node1&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;192.168.45.132:9100&#x27;</span>]</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/06-vim.png" class>

<p>docker 启动 prometheus：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull prom/prometheus</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/07-start.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name prometheus -p 9090:9090 \</span><br><span class="line">-v /server/docker/prometheus/server/prometheus.yml:/etc/prometheus/prometheus.yml \</span><br><span class="line">-v /server/docker/prometheus/server/rules.yml:/etc/prometheus/rules.yml \</span><br><span class="line">-itd prom/prometheus \</span><br><span class="line">--config.file=/etc/prometheus/prometheus.yml \</span><br><span class="line">--web.enable-lifecycle</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/08-run.png" class>

<p>注：启动时加入 <code>--web.enable-lifecycle</code> 启用远程热加载配置文件，<code>--config.file</code> 启动时加载配置文件。</p>
<p>访问 <a href="http://192.168.45.133:9090/">http://192.168.45.133:9090</a> 显示 Prometheus 。</p>
<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/09-view.png" class>

<h1 id="安装-Grafana"><a href="#安装-Grafana" class="headerlink" title="安装 Grafana"></a>安装 Grafana</h1><blockquote>
<p>server.</p>
</blockquote>
<h2 id="先启动测试-grafana"><a href="#先启动测试-grafana" class="headerlink" title="先启动测试 grafana"></a>先启动测试 grafana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull grafana/grafana</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/10-pull.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name=grafana -p 3000:3000 -itd grafana/grafana</span><br></pre></td></tr></table></figure>

<img src="/2024/01/03/%E5%9F%BA%E4%BA%8EDocker%E6%9E%84%E5%BB%BAPrometheus+Grafana%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/11-run.png" class>

<p>将配置文件复制到宿主机：</p>
<p>docker exec -it 96f51e2d555b &#x2F;bin&#x2F;bash </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> grafana:/etc/grafana/grafana.ini /server/docker/prometheus/grafana/ </span><br><span class="line">docker <span class="built_in">rm</span> -f grafana </span><br></pre></td></tr></table></figure>



<p>修改配置文件 grafana.ini，配置 smtp 邮件报警信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /server/docker/prometheus/grafana/grafana.ini</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">host = smtp.qq.com:465</span><br><span class="line">user = camellia24@qq.com</span><br><span class="line"><span class="comment"># If the password contains # or ; you ...</span></span><br><span class="line">password = dygawislbduqbehe</span><br><span class="line">;cert_file =</span><br><span class="line">;key_file =</span><br><span class="line">;skip_verify = <span class="literal">false</span></span><br><span class="line">from_address = camellia24@qq.com</span><br><span class="line">;from_name = Grafana</span><br></pre></td></tr></table></figure>

<p>根据实际添加上面这几条，<code>host</code> 、 <code>password</code> 可以登录邮箱查看。</p>
<h2 id="正式启动-grafana"><a href="#正式启动-grafana" class="headerlink" title="正式启动 grafana"></a>正式启动 grafana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3000:3000 --name grafana \</span><br><span class="line">-v /server/docker/prometheus/grafana/grafana.ini:/etc/grafana/grafana.ini \</span><br><span class="line">-v /server/docker/prometheus/grafana/data:/var/lib/grafana \</span><br><span class="line">-e <span class="string">&quot;GF_SECURITY_ADMIN_PASSWORD=grafana123&quot;</span> \</span><br><span class="line">-itd grafana/grafana</span><br></pre></td></tr></table></figure>

<p>注：<code>-e &quot;GF_SECURITY_ADMIN_PASSWORD=grafana123&quot;</code> 是设置 grafana 登陆页面的密码，如不添加这条，默认账号密码为 admin&#x2F;admin。</p>
<p>访问 <a href="http://192.168.45.133:3000/">http://192.168.45.133:3000</a> ，账号密码为：admin&#x2F;grafana123。</p>
<h2 id="nginx-实现域名访问-grafana"><a href="#nginx-实现域名访问-grafana" class="headerlink" title="nginx 实现域名访问 grafana"></a>nginx 实现域名访问 grafana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name grafana.aa.com;</span><br><span class="line">    listen 80;</span><br><span class="line">     </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.45.133:3000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://grafana.aa.com/">http://grafana.aa.com</a> 。</p>
<h2 id="添加-prometheus-数据源"><a href="#添加-prometheus-数据源" class="headerlink" title="添加 prometheus 数据源"></a>添加 prometheus 数据源</h2><p>COMPLETE &gt; Add your first data source &gt; Settings .</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>Name</td>
<td>Prometheus</td>
</tr>
<tr>
<td>URL</td>
<td><a href="http://192.168.45.133:9090/">http://192.168.45.133:9090</a></td>
</tr>
</tbody></table>
<h2 id="添加模板文件（监控主机信息）"><a href="#添加模板文件（监控主机信息）" class="headerlink" title="添加模板文件（监控主机信息）"></a>添加模板文件（监控主机信息）</h2><p>参考 <a href="https://www.jianshu.com/p/367d52fe1171">grafana 常用监控模板大全</a> 和 <a href="https://grafana.com/grafana/dashboards/">grafana 官网模板</a> 。根据需求下载网址中的模板，下载到本地后，导入到 grafana：</p>
<p>MENU &gt; Manage &gt; Import &gt; Upload JSON file &gt; 输入 URL &gt; Load .</p>
<p>也可以根据官网的模板 ID 号下载：</p>
<p>MENU &gt; Manage &gt; Import &gt; Import via grafana.com &gt; 输入 ID &gt; Load .</p>
<p>Options &gt; prometheus &gt; Prometheus &gt; Import.</p>
<h1 id="安装-cAdvisor"><a href="#安装-cAdvisor" class="headerlink" title="安装 cAdvisor"></a>安装 cAdvisor</h1><blockquote>
<p>server、client.</p>
</blockquote>
<h2 id="docker-安装-cAdvisor"><a href="#docker-安装-cAdvisor" class="headerlink" title="docker 安装 cAdvisor"></a>docker 安装 cAdvisor</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull google/cadvisor</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8088:8080 --name cadvisor \</span><br><span class="line">-v /:/rootfs:ro \</span><br><span class="line">-v /var/run:/var/run:rw \</span><br><span class="line">-v /sys:/sys:ro \</span><br><span class="line">-v /var/lib/docker/:/var/lib/docker:ro \</span><br><span class="line">-itd google/cadvisor:latest</span><br></pre></td></tr></table></figure>

<p>将 ip、端口加入到 prometheus.yml 文件，重启 prometheus 服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:</span><br><span class="line">  external_labels:</span><br><span class="line">    monitor: <span class="string">&#x27;codelab-monitor&#x27;</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9090&#x27;</span>,<span class="string">&#x27;192.168.45.133:9100&#x27;</span>,<span class="string">&#x27;192.168.45.133:8088&#x27;</span>]</span><br><span class="line">  - job_name: <span class="string">&#x27;client-node1&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;192.168.45.132:9100&#x27;</span>,<span class="string">&#x27;192.168.45.132:8088&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>重启 prometheus 让配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart prometheus</span><br></pre></td></tr></table></figure>

<h2 id="添加模板，监控-docker-容器"><a href="#添加模板，监控-docker-容器" class="headerlink" title="添加模板，监控 docker 容器"></a>添加模板，监控 docker 容器</h2><p>自行选择模板，展示：</p>
<h1 id="安装-blackbox-exporter-监控端口"><a href="#安装-blackbox-exporter-监控端口" class="headerlink" title="安装 blackbox_exporter 监控端口"></a>安装 blackbox_exporter 监控端口</h1><blockquote>
<p>server.</p>
</blockquote>
<h2 id="docker-安装-blackbox-exporter"><a href="#docker-安装-blackbox-exporter" class="headerlink" title="docker 安装 blackbox_exporter"></a>docker 安装 blackbox_exporter</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull prom/blackbox-exporter</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name blackbox -p 9115:9115-itd prom/blackbox-exporter</span><br></pre></td></tr></table></figure>

<p>在 prometheus.yml 文件添加监控配置：</p>
<blockquote>
<p>注意：格式不对 prometheus 会报错。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  - job_name: <span class="string">&#x27;prometheus_port_status&#x27;</span></span><br><span class="line">    metrics_path: /probe</span><br><span class="line">    params:</span><br><span class="line">      module: [tcp_connect]</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;192.168.1.20:8088&#x27;</span>,<span class="string">&#x27;192.168.1.20:9100&#x27;</span>,<span class="string">&#x27;192.168.1.20:8091&#x27;</span>,<span class="string">&#x27;192.168.45.132:8088&#x27;</span>,<span class="string">&#x27;192.168.45.132:9100&#x27;</span>,<span class="string">&#x27;192.168.45.132:8091&#x27;</span>]</span><br><span class="line">        labels:</span><br><span class="line">          instance: <span class="string">&#x27;port_status&#x27;</span></span><br><span class="line">          group: <span class="string">&#x27;tcp&#x27;</span></span><br><span class="line">    relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        target_label: __param_target</span><br><span class="line">      - source_labels: [__param_target]</span><br><span class="line">        target_label: instance</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: 192.168.1.20:9115</span><br><span class="line">  - job_name: <span class="string">&#x27;node_status&#x27;</span></span><br><span class="line">    metrics_path: /probe</span><br><span class="line">    params:</span><br><span class="line">      module: [icmp]</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;192.168.1.20&#x27;</span>,<span class="string">&#x27;192.168.45.132&#x27;</span>]</span><br><span class="line">        labels:</span><br><span class="line">          instance: <span class="string">&#x27;node_status&#x27;</span></span><br><span class="line">          group: <span class="string">&#x27;node&#x27;</span></span><br><span class="line">    relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        target_label: __param_target</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: 192.168.1.20:9115</span><br><span class="line">  - job_name: <span class="string">&#x27;web_status&#x27;</span></span><br><span class="line">    metrics_path: /probe</span><br><span class="line">    params:</span><br><span class="line">      module: [http_2xx]</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;https://www.baidu.com&#x27;</span>]</span><br><span class="line">        labels:</span><br><span class="line">          instance: <span class="string">&#x27;web_status&#x27;</span></span><br><span class="line">          group: <span class="string">&#x27;web&#x27;</span></span><br><span class="line">    relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        target_label: __param_target</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: 192.168.1.20:9115</span><br></pre></td></tr></table></figure>

<p>blackbox-exporter 在 grafana 页面展示需要安装 grafana-piechart-panel 插件。</p>
<p>下载完后，上传到 &#x2F;server&#x2F;docker&#x2F;prometheus&#x2F;grafana&#x2F;data&#x2F;plugins 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart grafana</span><br><span class="line">docker <span class="built_in">exec</span> -it grafana grafana-cli plugins install grafana-piechart-panel</span><br><span class="line">docker restart grafana</span><br></pre></td></tr></table></figure>

<h2 id="在-grafana-面板添加模板"><a href="#在-grafana-面板添加模板" class="headerlink" title="在 grafana 面板添加模板"></a>在 grafana 面板添加模板</h2><h1 id="Alert-警报"><a href="#Alert-警报" class="headerlink" title="Alert 警报"></a>Alert 警报</h1><h2 id="AlertManager-告警"><a href="#AlertManager-告警" class="headerlink" title="AlertManager 告警"></a>AlertManager 告警</h2><h2 id="grafana-自带-alert-告警"><a href="#grafana-自带-alert-告警" class="headerlink" title="grafana 自带 alert 告警"></a>grafana 自带 alert 告警</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/cfzy/p/14750004.html">Docker 搭建 Prometheus+grafana 监控系统-博客园</a></p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
        <tag>prometheus</tag>
        <tag>grafana</tag>
      </tags>
  </entry>
</search>
